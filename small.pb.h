// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: small.proto

#ifndef PROTOBUF_small_2eproto__INCLUDED
#define PROTOBUF_small_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace small {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_small_2eproto();
void protobuf_AssignDesc_small_2eproto();
void protobuf_ShutdownFile_small_2eproto();

class Data;

// ===================================================================

class Data : public ::google::protobuf::Message {
 public:
  Data();
  virtual ~Data();
  
  Data(const Data& from);
  
  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();
  
  void Swap(Data* other);
  
  // implements Message ----------------------------------------------
  
  Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string string_field0 = 1;
  inline bool has_string_field0() const;
  inline void clear_string_field0();
  static const int kStringField0FieldNumber = 1;
  inline const ::std::string& string_field0() const;
  inline void set_string_field0(const ::std::string& value);
  inline void set_string_field0(const char* value);
  inline void set_string_field0(const char* value, size_t size);
  inline ::std::string* mutable_string_field0();
  inline ::std::string* release_string_field0();
  
  // optional string string_field1 = 2;
  inline bool has_string_field1() const;
  inline void clear_string_field1();
  static const int kStringField1FieldNumber = 2;
  inline const ::std::string& string_field1() const;
  inline void set_string_field1(const ::std::string& value);
  inline void set_string_field1(const char* value);
  inline void set_string_field1(const char* value, size_t size);
  inline ::std::string* mutable_string_field1();
  inline ::std::string* release_string_field1();
  
  // optional string string_field2 = 3;
  inline bool has_string_field2() const;
  inline void clear_string_field2();
  static const int kStringField2FieldNumber = 3;
  inline const ::std::string& string_field2() const;
  inline void set_string_field2(const ::std::string& value);
  inline void set_string_field2(const char* value);
  inline void set_string_field2(const char* value, size_t size);
  inline ::std::string* mutable_string_field2();
  inline ::std::string* release_string_field2();
  
  // optional string string_field3 = 4;
  inline bool has_string_field3() const;
  inline void clear_string_field3();
  static const int kStringField3FieldNumber = 4;
  inline const ::std::string& string_field3() const;
  inline void set_string_field3(const ::std::string& value);
  inline void set_string_field3(const char* value);
  inline void set_string_field3(const char* value, size_t size);
  inline ::std::string* mutable_string_field3();
  inline ::std::string* release_string_field3();
  
  // optional string string_field4 = 5;
  inline bool has_string_field4() const;
  inline void clear_string_field4();
  static const int kStringField4FieldNumber = 5;
  inline const ::std::string& string_field4() const;
  inline void set_string_field4(const ::std::string& value);
  inline void set_string_field4(const char* value);
  inline void set_string_field4(const char* value, size_t size);
  inline ::std::string* mutable_string_field4();
  inline ::std::string* release_string_field4();
  
  // optional int32 int_field0 = 6;
  inline bool has_int_field0() const;
  inline void clear_int_field0();
  static const int kIntField0FieldNumber = 6;
  inline ::google::protobuf::int32 int_field0() const;
  inline void set_int_field0(::google::protobuf::int32 value);
  
  // optional int32 int_field1 = 7;
  inline bool has_int_field1() const;
  inline void clear_int_field1();
  static const int kIntField1FieldNumber = 7;
  inline ::google::protobuf::int32 int_field1() const;
  inline void set_int_field1(::google::protobuf::int32 value);
  
  // optional int32 int_field2 = 8;
  inline bool has_int_field2() const;
  inline void clear_int_field2();
  static const int kIntField2FieldNumber = 8;
  inline ::google::protobuf::int32 int_field2() const;
  inline void set_int_field2(::google::protobuf::int32 value);
  
  // optional int32 int_field3 = 9;
  inline bool has_int_field3() const;
  inline void clear_int_field3();
  static const int kIntField3FieldNumber = 9;
  inline ::google::protobuf::int32 int_field3() const;
  inline void set_int_field3(::google::protobuf::int32 value);
  
  // optional int32 int_field4 = 10;
  inline bool has_int_field4() const;
  inline void clear_int_field4();
  static const int kIntField4FieldNumber = 10;
  inline ::google::protobuf::int32 int_field4() const;
  inline void set_int_field4(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:small.Data)
 private:
  inline void set_has_string_field0();
  inline void clear_has_string_field0();
  inline void set_has_string_field1();
  inline void clear_has_string_field1();
  inline void set_has_string_field2();
  inline void clear_has_string_field2();
  inline void set_has_string_field3();
  inline void clear_has_string_field3();
  inline void set_has_string_field4();
  inline void clear_has_string_field4();
  inline void set_has_int_field0();
  inline void clear_has_int_field0();
  inline void set_has_int_field1();
  inline void clear_has_int_field1();
  inline void set_has_int_field2();
  inline void clear_has_int_field2();
  inline void set_has_int_field3();
  inline void clear_has_int_field3();
  inline void set_has_int_field4();
  inline void clear_has_int_field4();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* string_field0_;
  ::std::string* string_field1_;
  ::std::string* string_field2_;
  ::std::string* string_field3_;
  ::std::string* string_field4_;
  ::google::protobuf::int32 int_field0_;
  ::google::protobuf::int32 int_field1_;
  ::google::protobuf::int32 int_field2_;
  ::google::protobuf::int32 int_field3_;
  ::google::protobuf::int32 int_field4_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_small_2eproto();
  friend void protobuf_AssignDesc_small_2eproto();
  friend void protobuf_ShutdownFile_small_2eproto();
  
  void InitAsDefaultInstance();
  static Data* default_instance_;
};
// ===================================================================


// ===================================================================

// Data

// optional string string_field0 = 1;
inline bool Data::has_string_field0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_string_field0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_string_field0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_string_field0() {
  if (string_field0_ != &::google::protobuf::internal::kEmptyString) {
    string_field0_->clear();
  }
  clear_has_string_field0();
}
inline const ::std::string& Data::string_field0() const {
  return *string_field0_;
}
inline void Data::set_string_field0(const ::std::string& value) {
  set_has_string_field0();
  if (string_field0_ == &::google::protobuf::internal::kEmptyString) {
    string_field0_ = new ::std::string;
  }
  string_field0_->assign(value);
}
inline void Data::set_string_field0(const char* value) {
  set_has_string_field0();
  if (string_field0_ == &::google::protobuf::internal::kEmptyString) {
    string_field0_ = new ::std::string;
  }
  string_field0_->assign(value);
}
inline void Data::set_string_field0(const char* value, size_t size) {
  set_has_string_field0();
  if (string_field0_ == &::google::protobuf::internal::kEmptyString) {
    string_field0_ = new ::std::string;
  }
  string_field0_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field0() {
  set_has_string_field0();
  if (string_field0_ == &::google::protobuf::internal::kEmptyString) {
    string_field0_ = new ::std::string;
  }
  return string_field0_;
}
inline ::std::string* Data::release_string_field0() {
  clear_has_string_field0();
  if (string_field0_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field0_;
    string_field0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field1 = 2;
inline bool Data::has_string_field1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_string_field1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_string_field1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_string_field1() {
  if (string_field1_ != &::google::protobuf::internal::kEmptyString) {
    string_field1_->clear();
  }
  clear_has_string_field1();
}
inline const ::std::string& Data::string_field1() const {
  return *string_field1_;
}
inline void Data::set_string_field1(const ::std::string& value) {
  set_has_string_field1();
  if (string_field1_ == &::google::protobuf::internal::kEmptyString) {
    string_field1_ = new ::std::string;
  }
  string_field1_->assign(value);
}
inline void Data::set_string_field1(const char* value) {
  set_has_string_field1();
  if (string_field1_ == &::google::protobuf::internal::kEmptyString) {
    string_field1_ = new ::std::string;
  }
  string_field1_->assign(value);
}
inline void Data::set_string_field1(const char* value, size_t size) {
  set_has_string_field1();
  if (string_field1_ == &::google::protobuf::internal::kEmptyString) {
    string_field1_ = new ::std::string;
  }
  string_field1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field1() {
  set_has_string_field1();
  if (string_field1_ == &::google::protobuf::internal::kEmptyString) {
    string_field1_ = new ::std::string;
  }
  return string_field1_;
}
inline ::std::string* Data::release_string_field1() {
  clear_has_string_field1();
  if (string_field1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field1_;
    string_field1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field2 = 3;
inline bool Data::has_string_field2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Data::set_has_string_field2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Data::clear_has_string_field2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Data::clear_string_field2() {
  if (string_field2_ != &::google::protobuf::internal::kEmptyString) {
    string_field2_->clear();
  }
  clear_has_string_field2();
}
inline const ::std::string& Data::string_field2() const {
  return *string_field2_;
}
inline void Data::set_string_field2(const ::std::string& value) {
  set_has_string_field2();
  if (string_field2_ == &::google::protobuf::internal::kEmptyString) {
    string_field2_ = new ::std::string;
  }
  string_field2_->assign(value);
}
inline void Data::set_string_field2(const char* value) {
  set_has_string_field2();
  if (string_field2_ == &::google::protobuf::internal::kEmptyString) {
    string_field2_ = new ::std::string;
  }
  string_field2_->assign(value);
}
inline void Data::set_string_field2(const char* value, size_t size) {
  set_has_string_field2();
  if (string_field2_ == &::google::protobuf::internal::kEmptyString) {
    string_field2_ = new ::std::string;
  }
  string_field2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field2() {
  set_has_string_field2();
  if (string_field2_ == &::google::protobuf::internal::kEmptyString) {
    string_field2_ = new ::std::string;
  }
  return string_field2_;
}
inline ::std::string* Data::release_string_field2() {
  clear_has_string_field2();
  if (string_field2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field2_;
    string_field2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field3 = 4;
inline bool Data::has_string_field3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Data::set_has_string_field3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Data::clear_has_string_field3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Data::clear_string_field3() {
  if (string_field3_ != &::google::protobuf::internal::kEmptyString) {
    string_field3_->clear();
  }
  clear_has_string_field3();
}
inline const ::std::string& Data::string_field3() const {
  return *string_field3_;
}
inline void Data::set_string_field3(const ::std::string& value) {
  set_has_string_field3();
  if (string_field3_ == &::google::protobuf::internal::kEmptyString) {
    string_field3_ = new ::std::string;
  }
  string_field3_->assign(value);
}
inline void Data::set_string_field3(const char* value) {
  set_has_string_field3();
  if (string_field3_ == &::google::protobuf::internal::kEmptyString) {
    string_field3_ = new ::std::string;
  }
  string_field3_->assign(value);
}
inline void Data::set_string_field3(const char* value, size_t size) {
  set_has_string_field3();
  if (string_field3_ == &::google::protobuf::internal::kEmptyString) {
    string_field3_ = new ::std::string;
  }
  string_field3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field3() {
  set_has_string_field3();
  if (string_field3_ == &::google::protobuf::internal::kEmptyString) {
    string_field3_ = new ::std::string;
  }
  return string_field3_;
}
inline ::std::string* Data::release_string_field3() {
  clear_has_string_field3();
  if (string_field3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field3_;
    string_field3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field4 = 5;
inline bool Data::has_string_field4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Data::set_has_string_field4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Data::clear_has_string_field4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Data::clear_string_field4() {
  if (string_field4_ != &::google::protobuf::internal::kEmptyString) {
    string_field4_->clear();
  }
  clear_has_string_field4();
}
inline const ::std::string& Data::string_field4() const {
  return *string_field4_;
}
inline void Data::set_string_field4(const ::std::string& value) {
  set_has_string_field4();
  if (string_field4_ == &::google::protobuf::internal::kEmptyString) {
    string_field4_ = new ::std::string;
  }
  string_field4_->assign(value);
}
inline void Data::set_string_field4(const char* value) {
  set_has_string_field4();
  if (string_field4_ == &::google::protobuf::internal::kEmptyString) {
    string_field4_ = new ::std::string;
  }
  string_field4_->assign(value);
}
inline void Data::set_string_field4(const char* value, size_t size) {
  set_has_string_field4();
  if (string_field4_ == &::google::protobuf::internal::kEmptyString) {
    string_field4_ = new ::std::string;
  }
  string_field4_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field4() {
  set_has_string_field4();
  if (string_field4_ == &::google::protobuf::internal::kEmptyString) {
    string_field4_ = new ::std::string;
  }
  return string_field4_;
}
inline ::std::string* Data::release_string_field4() {
  clear_has_string_field4();
  if (string_field4_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field4_;
    string_field4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 int_field0 = 6;
inline bool Data::has_int_field0() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Data::set_has_int_field0() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Data::clear_has_int_field0() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Data::clear_int_field0() {
  int_field0_ = 0;
  clear_has_int_field0();
}
inline ::google::protobuf::int32 Data::int_field0() const {
  return int_field0_;
}
inline void Data::set_int_field0(::google::protobuf::int32 value) {
  set_has_int_field0();
  int_field0_ = value;
}

// optional int32 int_field1 = 7;
inline bool Data::has_int_field1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Data::set_has_int_field1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Data::clear_has_int_field1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Data::clear_int_field1() {
  int_field1_ = 0;
  clear_has_int_field1();
}
inline ::google::protobuf::int32 Data::int_field1() const {
  return int_field1_;
}
inline void Data::set_int_field1(::google::protobuf::int32 value) {
  set_has_int_field1();
  int_field1_ = value;
}

// optional int32 int_field2 = 8;
inline bool Data::has_int_field2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Data::set_has_int_field2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Data::clear_has_int_field2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Data::clear_int_field2() {
  int_field2_ = 0;
  clear_has_int_field2();
}
inline ::google::protobuf::int32 Data::int_field2() const {
  return int_field2_;
}
inline void Data::set_int_field2(::google::protobuf::int32 value) {
  set_has_int_field2();
  int_field2_ = value;
}

// optional int32 int_field3 = 9;
inline bool Data::has_int_field3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Data::set_has_int_field3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Data::clear_has_int_field3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Data::clear_int_field3() {
  int_field3_ = 0;
  clear_has_int_field3();
}
inline ::google::protobuf::int32 Data::int_field3() const {
  return int_field3_;
}
inline void Data::set_int_field3(::google::protobuf::int32 value) {
  set_has_int_field3();
  int_field3_ = value;
}

// optional int32 int_field4 = 10;
inline bool Data::has_int_field4() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Data::set_has_int_field4() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Data::clear_has_int_field4() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Data::clear_int_field4() {
  int_field4_ = 0;
  clear_has_int_field4();
}
inline ::google::protobuf::int32 Data::int_field4() const {
  return int_field4_;
}
inline void Data::set_int_field4(::google::protobuf::int32 value) {
  set_has_int_field4();
  int_field4_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace small

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_small_2eproto__INCLUDED
