// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "small.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace small {

namespace {

const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_small_2eproto() {
  protobuf_AddDesc_small_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "small.proto");
  GOOGLE_CHECK(file != NULL);
  Data_descriptor_ = file->message_type(0);
  static const int Data_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, string_field0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, string_field1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, string_field2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, string_field3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, string_field4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, int_field0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, int_field1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, int_field2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, int_field3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, int_field4_),
  };
  Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Data_descriptor_,
      Data::default_instance_,
      Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Data));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_small_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Data_descriptor_, &Data::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_small_2eproto() {
  delete Data::default_instance_;
  delete Data_reflection_;
}

void protobuf_AddDesc_small_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013small.proto\022\005small\"\335\001\n\004Data\022\025\n\rstring_"
    "field0\030\001 \001(\t\022\025\n\rstring_field1\030\002 \001(\t\022\025\n\rs"
    "tring_field2\030\003 \001(\t\022\025\n\rstring_field3\030\004 \001("
    "\t\022\025\n\rstring_field4\030\005 \001(\t\022\022\n\nint_field0\030\006"
    " \001(\005\022\022\n\nint_field1\030\007 \001(\005\022\022\n\nint_field2\030\010"
    " \001(\005\022\022\n\nint_field3\030\t \001(\005\022\022\n\nint_field4\030\n"
    " \001(\005", 244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "small.proto", &protobuf_RegisterTypes);
  Data::default_instance_ = new Data();
  Data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_small_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_small_2eproto {
  StaticDescriptorInitializer_small_2eproto() {
    protobuf_AddDesc_small_2eproto();
  }
} static_descriptor_initializer_small_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Data::kStringField0FieldNumber;
const int Data::kStringField1FieldNumber;
const int Data::kStringField2FieldNumber;
const int Data::kStringField3FieldNumber;
const int Data::kStringField4FieldNumber;
const int Data::kIntField0FieldNumber;
const int Data::kIntField1FieldNumber;
const int Data::kIntField2FieldNumber;
const int Data::kIntField3FieldNumber;
const int Data::kIntField4FieldNumber;
#endif  // !_MSC_VER

Data::Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Data::InitAsDefaultInstance() {
}

Data::Data(const Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Data::SharedCtor() {
  _cached_size_ = 0;
  string_field0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  string_field1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  string_field2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  string_field3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  string_field4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  int_field0_ = 0;
  int_field1_ = 0;
  int_field2_ = 0;
  int_field3_ = 0;
  int_field4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data::~Data() {
  SharedDtor();
}

void Data::SharedDtor() {
  if (string_field0_ != &::google::protobuf::internal::kEmptyString) {
    delete string_field0_;
  }
  if (string_field1_ != &::google::protobuf::internal::kEmptyString) {
    delete string_field1_;
  }
  if (string_field2_ != &::google::protobuf::internal::kEmptyString) {
    delete string_field2_;
  }
  if (string_field3_ != &::google::protobuf::internal::kEmptyString) {
    delete string_field3_;
  }
  if (string_field4_ != &::google::protobuf::internal::kEmptyString) {
    delete string_field4_;
  }
  if (this != default_instance_) {
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_small_2eproto();  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New() const {
  return new Data;
}

void Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_string_field0()) {
      if (string_field0_ != &::google::protobuf::internal::kEmptyString) {
        string_field0_->clear();
      }
    }
    if (has_string_field1()) {
      if (string_field1_ != &::google::protobuf::internal::kEmptyString) {
        string_field1_->clear();
      }
    }
    if (has_string_field2()) {
      if (string_field2_ != &::google::protobuf::internal::kEmptyString) {
        string_field2_->clear();
      }
    }
    if (has_string_field3()) {
      if (string_field3_ != &::google::protobuf::internal::kEmptyString) {
        string_field3_->clear();
      }
    }
    if (has_string_field4()) {
      if (string_field4_ != &::google::protobuf::internal::kEmptyString) {
        string_field4_->clear();
      }
    }
    int_field0_ = 0;
    int_field1_ = 0;
    int_field2_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    int_field3_ = 0;
    int_field4_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string string_field0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_field0()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_field0().data(), this->string_field0().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_string_field1;
        break;
      }
      
      // optional string string_field1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_field1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_field1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_field1().data(), this->string_field1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_string_field2;
        break;
      }
      
      // optional string string_field2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_field2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_field2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_field2().data(), this->string_field2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_string_field3;
        break;
      }
      
      // optional string string_field3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_field3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_field3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_field3().data(), this->string_field3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_string_field4;
        break;
      }
      
      // optional string string_field4 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_field4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_field4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_field4().data(), this->string_field4().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_int_field0;
        break;
      }
      
      // optional int32 int_field0 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_field0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_field0_)));
          set_has_int_field0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_int_field1;
        break;
      }
      
      // optional int32 int_field1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_field1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_field1_)));
          set_has_int_field1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_int_field2;
        break;
      }
      
      // optional int32 int_field2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_field2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_field2_)));
          set_has_int_field2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_int_field3;
        break;
      }
      
      // optional int32 int_field3 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_field3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_field3_)));
          set_has_int_field3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_int_field4;
        break;
      }
      
      // optional int32 int_field4 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_field4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_field4_)));
          set_has_int_field4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string string_field0 = 1;
  if (has_string_field0()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_field0().data(), this->string_field0().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->string_field0(), output);
  }
  
  // optional string string_field1 = 2;
  if (has_string_field1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_field1().data(), this->string_field1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->string_field1(), output);
  }
  
  // optional string string_field2 = 3;
  if (has_string_field2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_field2().data(), this->string_field2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->string_field2(), output);
  }
  
  // optional string string_field3 = 4;
  if (has_string_field3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_field3().data(), this->string_field3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->string_field3(), output);
  }
  
  // optional string string_field4 = 5;
  if (has_string_field4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_field4().data(), this->string_field4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->string_field4(), output);
  }
  
  // optional int32 int_field0 = 6;
  if (has_int_field0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->int_field0(), output);
  }
  
  // optional int32 int_field1 = 7;
  if (has_int_field1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->int_field1(), output);
  }
  
  // optional int32 int_field2 = 8;
  if (has_int_field2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->int_field2(), output);
  }
  
  // optional int32 int_field3 = 9;
  if (has_int_field3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->int_field3(), output);
  }
  
  // optional int32 int_field4 = 10;
  if (has_int_field4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->int_field4(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string string_field0 = 1;
  if (has_string_field0()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_field0().data(), this->string_field0().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string_field0(), target);
  }
  
  // optional string string_field1 = 2;
  if (has_string_field1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_field1().data(), this->string_field1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->string_field1(), target);
  }
  
  // optional string string_field2 = 3;
  if (has_string_field2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_field2().data(), this->string_field2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->string_field2(), target);
  }
  
  // optional string string_field3 = 4;
  if (has_string_field3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_field3().data(), this->string_field3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->string_field3(), target);
  }
  
  // optional string string_field4 = 5;
  if (has_string_field4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_field4().data(), this->string_field4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->string_field4(), target);
  }
  
  // optional int32 int_field0 = 6;
  if (has_int_field0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->int_field0(), target);
  }
  
  // optional int32 int_field1 = 7;
  if (has_int_field1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->int_field1(), target);
  }
  
  // optional int32 int_field2 = 8;
  if (has_int_field2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->int_field2(), target);
  }
  
  // optional int32 int_field3 = 9;
  if (has_int_field3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->int_field3(), target);
  }
  
  // optional int32 int_field4 = 10;
  if (has_int_field4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->int_field4(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Data::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string string_field0 = 1;
    if (has_string_field0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_field0());
    }
    
    // optional string string_field1 = 2;
    if (has_string_field1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_field1());
    }
    
    // optional string string_field2 = 3;
    if (has_string_field2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_field2());
    }
    
    // optional string string_field3 = 4;
    if (has_string_field3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_field3());
    }
    
    // optional string string_field4 = 5;
    if (has_string_field4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_field4());
    }
    
    // optional int32 int_field0 = 6;
    if (has_int_field0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_field0());
    }
    
    // optional int32 int_field1 = 7;
    if (has_int_field1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_field1());
    }
    
    // optional int32 int_field2 = 8;
    if (has_int_field2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_field2());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 int_field3 = 9;
    if (has_int_field3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_field3());
    }
    
    // optional int32 int_field4 = 10;
    if (has_int_field4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_field4());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_string_field0()) {
      set_string_field0(from.string_field0());
    }
    if (from.has_string_field1()) {
      set_string_field1(from.string_field1());
    }
    if (from.has_string_field2()) {
      set_string_field2(from.string_field2());
    }
    if (from.has_string_field3()) {
      set_string_field3(from.string_field3());
    }
    if (from.has_string_field4()) {
      set_string_field4(from.string_field4());
    }
    if (from.has_int_field0()) {
      set_int_field0(from.int_field0());
    }
    if (from.has_int_field1()) {
      set_int_field1(from.int_field1());
    }
    if (from.has_int_field2()) {
      set_int_field2(from.int_field2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_int_field3()) {
      set_int_field3(from.int_field3());
    }
    if (from.has_int_field4()) {
      set_int_field4(from.int_field4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  
  return true;
}

void Data::Swap(Data* other) {
  if (other != this) {
    std::swap(string_field0_, other->string_field0_);
    std::swap(string_field1_, other->string_field1_);
    std::swap(string_field2_, other->string_field2_);
    std::swap(string_field3_, other->string_field3_);
    std::swap(string_field4_, other->string_field4_);
    std::swap(int_field0_, other->int_field0_);
    std::swap(int_field1_, other->int_field1_);
    std::swap(int_field2_, other->int_field2_);
    std::swap(int_field3_, other->int_field3_);
    std::swap(int_field4_, other->int_field4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace small

// @@protoc_insertion_point(global_scope)
