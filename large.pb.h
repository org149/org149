// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: large.proto

#ifndef PROTOBUF_large_2eproto__INCLUDED
#define PROTOBUF_large_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace large {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_large_2eproto();
void protobuf_AssignDesc_large_2eproto();
void protobuf_ShutdownFile_large_2eproto();

class Data;

// ===================================================================

class Data : public ::google::protobuf::Message {
 public:
  Data();
  virtual ~Data();
  
  Data(const Data& from);
  
  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();
  
  void Swap(Data* other);
  
  // implements Message ----------------------------------------------
  
  Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string string_field0 = 1;
  inline bool has_string_field0() const;
  inline void clear_string_field0();
  static const int kStringField0FieldNumber = 1;
  inline const ::std::string& string_field0() const;
  inline void set_string_field0(const ::std::string& value);
  inline void set_string_field0(const char* value);
  inline void set_string_field0(const char* value, size_t size);
  inline ::std::string* mutable_string_field0();
  inline ::std::string* release_string_field0();
  
  // optional string string_field1 = 2;
  inline bool has_string_field1() const;
  inline void clear_string_field1();
  static const int kStringField1FieldNumber = 2;
  inline const ::std::string& string_field1() const;
  inline void set_string_field1(const ::std::string& value);
  inline void set_string_field1(const char* value);
  inline void set_string_field1(const char* value, size_t size);
  inline ::std::string* mutable_string_field1();
  inline ::std::string* release_string_field1();
  
  // optional string string_field2 = 3;
  inline bool has_string_field2() const;
  inline void clear_string_field2();
  static const int kStringField2FieldNumber = 3;
  inline const ::std::string& string_field2() const;
  inline void set_string_field2(const ::std::string& value);
  inline void set_string_field2(const char* value);
  inline void set_string_field2(const char* value, size_t size);
  inline ::std::string* mutable_string_field2();
  inline ::std::string* release_string_field2();
  
  // optional string string_field3 = 4;
  inline bool has_string_field3() const;
  inline void clear_string_field3();
  static const int kStringField3FieldNumber = 4;
  inline const ::std::string& string_field3() const;
  inline void set_string_field3(const ::std::string& value);
  inline void set_string_field3(const char* value);
  inline void set_string_field3(const char* value, size_t size);
  inline ::std::string* mutable_string_field3();
  inline ::std::string* release_string_field3();
  
  // optional string string_field4 = 5;
  inline bool has_string_field4() const;
  inline void clear_string_field4();
  static const int kStringField4FieldNumber = 5;
  inline const ::std::string& string_field4() const;
  inline void set_string_field4(const ::std::string& value);
  inline void set_string_field4(const char* value);
  inline void set_string_field4(const char* value, size_t size);
  inline ::std::string* mutable_string_field4();
  inline ::std::string* release_string_field4();
  
  // optional string string_field5 = 6;
  inline bool has_string_field5() const;
  inline void clear_string_field5();
  static const int kStringField5FieldNumber = 6;
  inline const ::std::string& string_field5() const;
  inline void set_string_field5(const ::std::string& value);
  inline void set_string_field5(const char* value);
  inline void set_string_field5(const char* value, size_t size);
  inline ::std::string* mutable_string_field5();
  inline ::std::string* release_string_field5();
  
  // optional string string_field6 = 7;
  inline bool has_string_field6() const;
  inline void clear_string_field6();
  static const int kStringField6FieldNumber = 7;
  inline const ::std::string& string_field6() const;
  inline void set_string_field6(const ::std::string& value);
  inline void set_string_field6(const char* value);
  inline void set_string_field6(const char* value, size_t size);
  inline ::std::string* mutable_string_field6();
  inline ::std::string* release_string_field6();
  
  // optional string string_field7 = 8;
  inline bool has_string_field7() const;
  inline void clear_string_field7();
  static const int kStringField7FieldNumber = 8;
  inline const ::std::string& string_field7() const;
  inline void set_string_field7(const ::std::string& value);
  inline void set_string_field7(const char* value);
  inline void set_string_field7(const char* value, size_t size);
  inline ::std::string* mutable_string_field7();
  inline ::std::string* release_string_field7();
  
  // optional string string_field8 = 9;
  inline bool has_string_field8() const;
  inline void clear_string_field8();
  static const int kStringField8FieldNumber = 9;
  inline const ::std::string& string_field8() const;
  inline void set_string_field8(const ::std::string& value);
  inline void set_string_field8(const char* value);
  inline void set_string_field8(const char* value, size_t size);
  inline ::std::string* mutable_string_field8();
  inline ::std::string* release_string_field8();
  
  // optional string string_field9 = 10;
  inline bool has_string_field9() const;
  inline void clear_string_field9();
  static const int kStringField9FieldNumber = 10;
  inline const ::std::string& string_field9() const;
  inline void set_string_field9(const ::std::string& value);
  inline void set_string_field9(const char* value);
  inline void set_string_field9(const char* value, size_t size);
  inline ::std::string* mutable_string_field9();
  inline ::std::string* release_string_field9();
  
  // optional string string_field10 = 11;
  inline bool has_string_field10() const;
  inline void clear_string_field10();
  static const int kStringField10FieldNumber = 11;
  inline const ::std::string& string_field10() const;
  inline void set_string_field10(const ::std::string& value);
  inline void set_string_field10(const char* value);
  inline void set_string_field10(const char* value, size_t size);
  inline ::std::string* mutable_string_field10();
  inline ::std::string* release_string_field10();
  
  // optional string string_field11 = 12;
  inline bool has_string_field11() const;
  inline void clear_string_field11();
  static const int kStringField11FieldNumber = 12;
  inline const ::std::string& string_field11() const;
  inline void set_string_field11(const ::std::string& value);
  inline void set_string_field11(const char* value);
  inline void set_string_field11(const char* value, size_t size);
  inline ::std::string* mutable_string_field11();
  inline ::std::string* release_string_field11();
  
  // optional string string_field12 = 13;
  inline bool has_string_field12() const;
  inline void clear_string_field12();
  static const int kStringField12FieldNumber = 13;
  inline const ::std::string& string_field12() const;
  inline void set_string_field12(const ::std::string& value);
  inline void set_string_field12(const char* value);
  inline void set_string_field12(const char* value, size_t size);
  inline ::std::string* mutable_string_field12();
  inline ::std::string* release_string_field12();
  
  // optional string string_field13 = 14;
  inline bool has_string_field13() const;
  inline void clear_string_field13();
  static const int kStringField13FieldNumber = 14;
  inline const ::std::string& string_field13() const;
  inline void set_string_field13(const ::std::string& value);
  inline void set_string_field13(const char* value);
  inline void set_string_field13(const char* value, size_t size);
  inline ::std::string* mutable_string_field13();
  inline ::std::string* release_string_field13();
  
  // optional string string_field14 = 15;
  inline bool has_string_field14() const;
  inline void clear_string_field14();
  static const int kStringField14FieldNumber = 15;
  inline const ::std::string& string_field14() const;
  inline void set_string_field14(const ::std::string& value);
  inline void set_string_field14(const char* value);
  inline void set_string_field14(const char* value, size_t size);
  inline ::std::string* mutable_string_field14();
  inline ::std::string* release_string_field14();
  
  // optional string string_field15 = 16;
  inline bool has_string_field15() const;
  inline void clear_string_field15();
  static const int kStringField15FieldNumber = 16;
  inline const ::std::string& string_field15() const;
  inline void set_string_field15(const ::std::string& value);
  inline void set_string_field15(const char* value);
  inline void set_string_field15(const char* value, size_t size);
  inline ::std::string* mutable_string_field15();
  inline ::std::string* release_string_field15();
  
  // optional string string_field16 = 17;
  inline bool has_string_field16() const;
  inline void clear_string_field16();
  static const int kStringField16FieldNumber = 17;
  inline const ::std::string& string_field16() const;
  inline void set_string_field16(const ::std::string& value);
  inline void set_string_field16(const char* value);
  inline void set_string_field16(const char* value, size_t size);
  inline ::std::string* mutable_string_field16();
  inline ::std::string* release_string_field16();
  
  // optional string string_field17 = 18;
  inline bool has_string_field17() const;
  inline void clear_string_field17();
  static const int kStringField17FieldNumber = 18;
  inline const ::std::string& string_field17() const;
  inline void set_string_field17(const ::std::string& value);
  inline void set_string_field17(const char* value);
  inline void set_string_field17(const char* value, size_t size);
  inline ::std::string* mutable_string_field17();
  inline ::std::string* release_string_field17();
  
  // optional string string_field18 = 19;
  inline bool has_string_field18() const;
  inline void clear_string_field18();
  static const int kStringField18FieldNumber = 19;
  inline const ::std::string& string_field18() const;
  inline void set_string_field18(const ::std::string& value);
  inline void set_string_field18(const char* value);
  inline void set_string_field18(const char* value, size_t size);
  inline ::std::string* mutable_string_field18();
  inline ::std::string* release_string_field18();
  
  // optional string string_field19 = 20;
  inline bool has_string_field19() const;
  inline void clear_string_field19();
  static const int kStringField19FieldNumber = 20;
  inline const ::std::string& string_field19() const;
  inline void set_string_field19(const ::std::string& value);
  inline void set_string_field19(const char* value);
  inline void set_string_field19(const char* value, size_t size);
  inline ::std::string* mutable_string_field19();
  inline ::std::string* release_string_field19();
  
  // optional string string_field20 = 21;
  inline bool has_string_field20() const;
  inline void clear_string_field20();
  static const int kStringField20FieldNumber = 21;
  inline const ::std::string& string_field20() const;
  inline void set_string_field20(const ::std::string& value);
  inline void set_string_field20(const char* value);
  inline void set_string_field20(const char* value, size_t size);
  inline ::std::string* mutable_string_field20();
  inline ::std::string* release_string_field20();
  
  // optional string string_field21 = 22;
  inline bool has_string_field21() const;
  inline void clear_string_field21();
  static const int kStringField21FieldNumber = 22;
  inline const ::std::string& string_field21() const;
  inline void set_string_field21(const ::std::string& value);
  inline void set_string_field21(const char* value);
  inline void set_string_field21(const char* value, size_t size);
  inline ::std::string* mutable_string_field21();
  inline ::std::string* release_string_field21();
  
  // optional string string_field22 = 23;
  inline bool has_string_field22() const;
  inline void clear_string_field22();
  static const int kStringField22FieldNumber = 23;
  inline const ::std::string& string_field22() const;
  inline void set_string_field22(const ::std::string& value);
  inline void set_string_field22(const char* value);
  inline void set_string_field22(const char* value, size_t size);
  inline ::std::string* mutable_string_field22();
  inline ::std::string* release_string_field22();
  
  // optional string string_field23 = 24;
  inline bool has_string_field23() const;
  inline void clear_string_field23();
  static const int kStringField23FieldNumber = 24;
  inline const ::std::string& string_field23() const;
  inline void set_string_field23(const ::std::string& value);
  inline void set_string_field23(const char* value);
  inline void set_string_field23(const char* value, size_t size);
  inline ::std::string* mutable_string_field23();
  inline ::std::string* release_string_field23();
  
  // optional string string_field24 = 25;
  inline bool has_string_field24() const;
  inline void clear_string_field24();
  static const int kStringField24FieldNumber = 25;
  inline const ::std::string& string_field24() const;
  inline void set_string_field24(const ::std::string& value);
  inline void set_string_field24(const char* value);
  inline void set_string_field24(const char* value, size_t size);
  inline ::std::string* mutable_string_field24();
  inline ::std::string* release_string_field24();
  
  // optional string string_field25 = 26;
  inline bool has_string_field25() const;
  inline void clear_string_field25();
  static const int kStringField25FieldNumber = 26;
  inline const ::std::string& string_field25() const;
  inline void set_string_field25(const ::std::string& value);
  inline void set_string_field25(const char* value);
  inline void set_string_field25(const char* value, size_t size);
  inline ::std::string* mutable_string_field25();
  inline ::std::string* release_string_field25();
  
  // optional string string_field26 = 27;
  inline bool has_string_field26() const;
  inline void clear_string_field26();
  static const int kStringField26FieldNumber = 27;
  inline const ::std::string& string_field26() const;
  inline void set_string_field26(const ::std::string& value);
  inline void set_string_field26(const char* value);
  inline void set_string_field26(const char* value, size_t size);
  inline ::std::string* mutable_string_field26();
  inline ::std::string* release_string_field26();
  
  // optional string string_field27 = 28;
  inline bool has_string_field27() const;
  inline void clear_string_field27();
  static const int kStringField27FieldNumber = 28;
  inline const ::std::string& string_field27() const;
  inline void set_string_field27(const ::std::string& value);
  inline void set_string_field27(const char* value);
  inline void set_string_field27(const char* value, size_t size);
  inline ::std::string* mutable_string_field27();
  inline ::std::string* release_string_field27();
  
  // optional string string_field28 = 29;
  inline bool has_string_field28() const;
  inline void clear_string_field28();
  static const int kStringField28FieldNumber = 29;
  inline const ::std::string& string_field28() const;
  inline void set_string_field28(const ::std::string& value);
  inline void set_string_field28(const char* value);
  inline void set_string_field28(const char* value, size_t size);
  inline ::std::string* mutable_string_field28();
  inline ::std::string* release_string_field28();
  
  // optional string string_field29 = 30;
  inline bool has_string_field29() const;
  inline void clear_string_field29();
  static const int kStringField29FieldNumber = 30;
  inline const ::std::string& string_field29() const;
  inline void set_string_field29(const ::std::string& value);
  inline void set_string_field29(const char* value);
  inline void set_string_field29(const char* value, size_t size);
  inline ::std::string* mutable_string_field29();
  inline ::std::string* release_string_field29();
  
  // optional string string_field30 = 31;
  inline bool has_string_field30() const;
  inline void clear_string_field30();
  static const int kStringField30FieldNumber = 31;
  inline const ::std::string& string_field30() const;
  inline void set_string_field30(const ::std::string& value);
  inline void set_string_field30(const char* value);
  inline void set_string_field30(const char* value, size_t size);
  inline ::std::string* mutable_string_field30();
  inline ::std::string* release_string_field30();
  
  // optional string string_field31 = 32;
  inline bool has_string_field31() const;
  inline void clear_string_field31();
  static const int kStringField31FieldNumber = 32;
  inline const ::std::string& string_field31() const;
  inline void set_string_field31(const ::std::string& value);
  inline void set_string_field31(const char* value);
  inline void set_string_field31(const char* value, size_t size);
  inline ::std::string* mutable_string_field31();
  inline ::std::string* release_string_field31();
  
  // optional string string_field32 = 33;
  inline bool has_string_field32() const;
  inline void clear_string_field32();
  static const int kStringField32FieldNumber = 33;
  inline const ::std::string& string_field32() const;
  inline void set_string_field32(const ::std::string& value);
  inline void set_string_field32(const char* value);
  inline void set_string_field32(const char* value, size_t size);
  inline ::std::string* mutable_string_field32();
  inline ::std::string* release_string_field32();
  
  // optional string string_field33 = 34;
  inline bool has_string_field33() const;
  inline void clear_string_field33();
  static const int kStringField33FieldNumber = 34;
  inline const ::std::string& string_field33() const;
  inline void set_string_field33(const ::std::string& value);
  inline void set_string_field33(const char* value);
  inline void set_string_field33(const char* value, size_t size);
  inline ::std::string* mutable_string_field33();
  inline ::std::string* release_string_field33();
  
  // optional string string_field34 = 35;
  inline bool has_string_field34() const;
  inline void clear_string_field34();
  static const int kStringField34FieldNumber = 35;
  inline const ::std::string& string_field34() const;
  inline void set_string_field34(const ::std::string& value);
  inline void set_string_field34(const char* value);
  inline void set_string_field34(const char* value, size_t size);
  inline ::std::string* mutable_string_field34();
  inline ::std::string* release_string_field34();
  
  // optional string string_field35 = 36;
  inline bool has_string_field35() const;
  inline void clear_string_field35();
  static const int kStringField35FieldNumber = 36;
  inline const ::std::string& string_field35() const;
  inline void set_string_field35(const ::std::string& value);
  inline void set_string_field35(const char* value);
  inline void set_string_field35(const char* value, size_t size);
  inline ::std::string* mutable_string_field35();
  inline ::std::string* release_string_field35();
  
  // optional string string_field36 = 37;
  inline bool has_string_field36() const;
  inline void clear_string_field36();
  static const int kStringField36FieldNumber = 37;
  inline const ::std::string& string_field36() const;
  inline void set_string_field36(const ::std::string& value);
  inline void set_string_field36(const char* value);
  inline void set_string_field36(const char* value, size_t size);
  inline ::std::string* mutable_string_field36();
  inline ::std::string* release_string_field36();
  
  // optional string string_field37 = 38;
  inline bool has_string_field37() const;
  inline void clear_string_field37();
  static const int kStringField37FieldNumber = 38;
  inline const ::std::string& string_field37() const;
  inline void set_string_field37(const ::std::string& value);
  inline void set_string_field37(const char* value);
  inline void set_string_field37(const char* value, size_t size);
  inline ::std::string* mutable_string_field37();
  inline ::std::string* release_string_field37();
  
  // optional string string_field38 = 39;
  inline bool has_string_field38() const;
  inline void clear_string_field38();
  static const int kStringField38FieldNumber = 39;
  inline const ::std::string& string_field38() const;
  inline void set_string_field38(const ::std::string& value);
  inline void set_string_field38(const char* value);
  inline void set_string_field38(const char* value, size_t size);
  inline ::std::string* mutable_string_field38();
  inline ::std::string* release_string_field38();
  
  // optional string string_field39 = 40;
  inline bool has_string_field39() const;
  inline void clear_string_field39();
  static const int kStringField39FieldNumber = 40;
  inline const ::std::string& string_field39() const;
  inline void set_string_field39(const ::std::string& value);
  inline void set_string_field39(const char* value);
  inline void set_string_field39(const char* value, size_t size);
  inline ::std::string* mutable_string_field39();
  inline ::std::string* release_string_field39();
  
  // optional string string_field40 = 41;
  inline bool has_string_field40() const;
  inline void clear_string_field40();
  static const int kStringField40FieldNumber = 41;
  inline const ::std::string& string_field40() const;
  inline void set_string_field40(const ::std::string& value);
  inline void set_string_field40(const char* value);
  inline void set_string_field40(const char* value, size_t size);
  inline ::std::string* mutable_string_field40();
  inline ::std::string* release_string_field40();
  
  // optional string string_field41 = 42;
  inline bool has_string_field41() const;
  inline void clear_string_field41();
  static const int kStringField41FieldNumber = 42;
  inline const ::std::string& string_field41() const;
  inline void set_string_field41(const ::std::string& value);
  inline void set_string_field41(const char* value);
  inline void set_string_field41(const char* value, size_t size);
  inline ::std::string* mutable_string_field41();
  inline ::std::string* release_string_field41();
  
  // optional string string_field42 = 43;
  inline bool has_string_field42() const;
  inline void clear_string_field42();
  static const int kStringField42FieldNumber = 43;
  inline const ::std::string& string_field42() const;
  inline void set_string_field42(const ::std::string& value);
  inline void set_string_field42(const char* value);
  inline void set_string_field42(const char* value, size_t size);
  inline ::std::string* mutable_string_field42();
  inline ::std::string* release_string_field42();
  
  // optional string string_field43 = 44;
  inline bool has_string_field43() const;
  inline void clear_string_field43();
  static const int kStringField43FieldNumber = 44;
  inline const ::std::string& string_field43() const;
  inline void set_string_field43(const ::std::string& value);
  inline void set_string_field43(const char* value);
  inline void set_string_field43(const char* value, size_t size);
  inline ::std::string* mutable_string_field43();
  inline ::std::string* release_string_field43();
  
  // optional string string_field44 = 45;
  inline bool has_string_field44() const;
  inline void clear_string_field44();
  static const int kStringField44FieldNumber = 45;
  inline const ::std::string& string_field44() const;
  inline void set_string_field44(const ::std::string& value);
  inline void set_string_field44(const char* value);
  inline void set_string_field44(const char* value, size_t size);
  inline ::std::string* mutable_string_field44();
  inline ::std::string* release_string_field44();
  
  // optional string string_field45 = 46;
  inline bool has_string_field45() const;
  inline void clear_string_field45();
  static const int kStringField45FieldNumber = 46;
  inline const ::std::string& string_field45() const;
  inline void set_string_field45(const ::std::string& value);
  inline void set_string_field45(const char* value);
  inline void set_string_field45(const char* value, size_t size);
  inline ::std::string* mutable_string_field45();
  inline ::std::string* release_string_field45();
  
  // optional string string_field46 = 47;
  inline bool has_string_field46() const;
  inline void clear_string_field46();
  static const int kStringField46FieldNumber = 47;
  inline const ::std::string& string_field46() const;
  inline void set_string_field46(const ::std::string& value);
  inline void set_string_field46(const char* value);
  inline void set_string_field46(const char* value, size_t size);
  inline ::std::string* mutable_string_field46();
  inline ::std::string* release_string_field46();
  
  // optional string string_field47 = 48;
  inline bool has_string_field47() const;
  inline void clear_string_field47();
  static const int kStringField47FieldNumber = 48;
  inline const ::std::string& string_field47() const;
  inline void set_string_field47(const ::std::string& value);
  inline void set_string_field47(const char* value);
  inline void set_string_field47(const char* value, size_t size);
  inline ::std::string* mutable_string_field47();
  inline ::std::string* release_string_field47();
  
  // optional string string_field48 = 49;
  inline bool has_string_field48() const;
  inline void clear_string_field48();
  static const int kStringField48FieldNumber = 49;
  inline const ::std::string& string_field48() const;
  inline void set_string_field48(const ::std::string& value);
  inline void set_string_field48(const char* value);
  inline void set_string_field48(const char* value, size_t size);
  inline ::std::string* mutable_string_field48();
  inline ::std::string* release_string_field48();
  
  // optional string string_field49 = 50;
  inline bool has_string_field49() const;
  inline void clear_string_field49();
  static const int kStringField49FieldNumber = 50;
  inline const ::std::string& string_field49() const;
  inline void set_string_field49(const ::std::string& value);
  inline void set_string_field49(const char* value);
  inline void set_string_field49(const char* value, size_t size);
  inline ::std::string* mutable_string_field49();
  inline ::std::string* release_string_field49();
  
  // optional int32 int_field0 = 51;
  inline bool has_int_field0() const;
  inline void clear_int_field0();
  static const int kIntField0FieldNumber = 51;
  inline ::google::protobuf::int32 int_field0() const;
  inline void set_int_field0(::google::protobuf::int32 value);
  
  // optional int32 int_field1 = 52;
  inline bool has_int_field1() const;
  inline void clear_int_field1();
  static const int kIntField1FieldNumber = 52;
  inline ::google::protobuf::int32 int_field1() const;
  inline void set_int_field1(::google::protobuf::int32 value);
  
  // optional int32 int_field2 = 53;
  inline bool has_int_field2() const;
  inline void clear_int_field2();
  static const int kIntField2FieldNumber = 53;
  inline ::google::protobuf::int32 int_field2() const;
  inline void set_int_field2(::google::protobuf::int32 value);
  
  // optional int32 int_field3 = 54;
  inline bool has_int_field3() const;
  inline void clear_int_field3();
  static const int kIntField3FieldNumber = 54;
  inline ::google::protobuf::int32 int_field3() const;
  inline void set_int_field3(::google::protobuf::int32 value);
  
  // optional int32 int_field4 = 55;
  inline bool has_int_field4() const;
  inline void clear_int_field4();
  static const int kIntField4FieldNumber = 55;
  inline ::google::protobuf::int32 int_field4() const;
  inline void set_int_field4(::google::protobuf::int32 value);
  
  // optional int32 int_field5 = 56;
  inline bool has_int_field5() const;
  inline void clear_int_field5();
  static const int kIntField5FieldNumber = 56;
  inline ::google::protobuf::int32 int_field5() const;
  inline void set_int_field5(::google::protobuf::int32 value);
  
  // optional int32 int_field6 = 57;
  inline bool has_int_field6() const;
  inline void clear_int_field6();
  static const int kIntField6FieldNumber = 57;
  inline ::google::protobuf::int32 int_field6() const;
  inline void set_int_field6(::google::protobuf::int32 value);
  
  // optional int32 int_field7 = 58;
  inline bool has_int_field7() const;
  inline void clear_int_field7();
  static const int kIntField7FieldNumber = 58;
  inline ::google::protobuf::int32 int_field7() const;
  inline void set_int_field7(::google::protobuf::int32 value);
  
  // optional int32 int_field8 = 59;
  inline bool has_int_field8() const;
  inline void clear_int_field8();
  static const int kIntField8FieldNumber = 59;
  inline ::google::protobuf::int32 int_field8() const;
  inline void set_int_field8(::google::protobuf::int32 value);
  
  // optional int32 int_field9 = 60;
  inline bool has_int_field9() const;
  inline void clear_int_field9();
  static const int kIntField9FieldNumber = 60;
  inline ::google::protobuf::int32 int_field9() const;
  inline void set_int_field9(::google::protobuf::int32 value);
  
  // optional int32 int_field10 = 61;
  inline bool has_int_field10() const;
  inline void clear_int_field10();
  static const int kIntField10FieldNumber = 61;
  inline ::google::protobuf::int32 int_field10() const;
  inline void set_int_field10(::google::protobuf::int32 value);
  
  // optional int32 int_field11 = 62;
  inline bool has_int_field11() const;
  inline void clear_int_field11();
  static const int kIntField11FieldNumber = 62;
  inline ::google::protobuf::int32 int_field11() const;
  inline void set_int_field11(::google::protobuf::int32 value);
  
  // optional int32 int_field12 = 63;
  inline bool has_int_field12() const;
  inline void clear_int_field12();
  static const int kIntField12FieldNumber = 63;
  inline ::google::protobuf::int32 int_field12() const;
  inline void set_int_field12(::google::protobuf::int32 value);
  
  // optional int32 int_field13 = 64;
  inline bool has_int_field13() const;
  inline void clear_int_field13();
  static const int kIntField13FieldNumber = 64;
  inline ::google::protobuf::int32 int_field13() const;
  inline void set_int_field13(::google::protobuf::int32 value);
  
  // optional int32 int_field14 = 65;
  inline bool has_int_field14() const;
  inline void clear_int_field14();
  static const int kIntField14FieldNumber = 65;
  inline ::google::protobuf::int32 int_field14() const;
  inline void set_int_field14(::google::protobuf::int32 value);
  
  // optional int32 int_field15 = 66;
  inline bool has_int_field15() const;
  inline void clear_int_field15();
  static const int kIntField15FieldNumber = 66;
  inline ::google::protobuf::int32 int_field15() const;
  inline void set_int_field15(::google::protobuf::int32 value);
  
  // optional int32 int_field16 = 67;
  inline bool has_int_field16() const;
  inline void clear_int_field16();
  static const int kIntField16FieldNumber = 67;
  inline ::google::protobuf::int32 int_field16() const;
  inline void set_int_field16(::google::protobuf::int32 value);
  
  // optional int32 int_field17 = 68;
  inline bool has_int_field17() const;
  inline void clear_int_field17();
  static const int kIntField17FieldNumber = 68;
  inline ::google::protobuf::int32 int_field17() const;
  inline void set_int_field17(::google::protobuf::int32 value);
  
  // optional int32 int_field18 = 69;
  inline bool has_int_field18() const;
  inline void clear_int_field18();
  static const int kIntField18FieldNumber = 69;
  inline ::google::protobuf::int32 int_field18() const;
  inline void set_int_field18(::google::protobuf::int32 value);
  
  // optional int32 int_field19 = 70;
  inline bool has_int_field19() const;
  inline void clear_int_field19();
  static const int kIntField19FieldNumber = 70;
  inline ::google::protobuf::int32 int_field19() const;
  inline void set_int_field19(::google::protobuf::int32 value);
  
  // optional int32 int_field20 = 71;
  inline bool has_int_field20() const;
  inline void clear_int_field20();
  static const int kIntField20FieldNumber = 71;
  inline ::google::protobuf::int32 int_field20() const;
  inline void set_int_field20(::google::protobuf::int32 value);
  
  // optional int32 int_field21 = 72;
  inline bool has_int_field21() const;
  inline void clear_int_field21();
  static const int kIntField21FieldNumber = 72;
  inline ::google::protobuf::int32 int_field21() const;
  inline void set_int_field21(::google::protobuf::int32 value);
  
  // optional int32 int_field22 = 73;
  inline bool has_int_field22() const;
  inline void clear_int_field22();
  static const int kIntField22FieldNumber = 73;
  inline ::google::protobuf::int32 int_field22() const;
  inline void set_int_field22(::google::protobuf::int32 value);
  
  // optional int32 int_field23 = 74;
  inline bool has_int_field23() const;
  inline void clear_int_field23();
  static const int kIntField23FieldNumber = 74;
  inline ::google::protobuf::int32 int_field23() const;
  inline void set_int_field23(::google::protobuf::int32 value);
  
  // optional int32 int_field24 = 75;
  inline bool has_int_field24() const;
  inline void clear_int_field24();
  static const int kIntField24FieldNumber = 75;
  inline ::google::protobuf::int32 int_field24() const;
  inline void set_int_field24(::google::protobuf::int32 value);
  
  // optional int32 int_field25 = 76;
  inline bool has_int_field25() const;
  inline void clear_int_field25();
  static const int kIntField25FieldNumber = 76;
  inline ::google::protobuf::int32 int_field25() const;
  inline void set_int_field25(::google::protobuf::int32 value);
  
  // optional int32 int_field26 = 77;
  inline bool has_int_field26() const;
  inline void clear_int_field26();
  static const int kIntField26FieldNumber = 77;
  inline ::google::protobuf::int32 int_field26() const;
  inline void set_int_field26(::google::protobuf::int32 value);
  
  // optional int32 int_field27 = 78;
  inline bool has_int_field27() const;
  inline void clear_int_field27();
  static const int kIntField27FieldNumber = 78;
  inline ::google::protobuf::int32 int_field27() const;
  inline void set_int_field27(::google::protobuf::int32 value);
  
  // optional int32 int_field28 = 79;
  inline bool has_int_field28() const;
  inline void clear_int_field28();
  static const int kIntField28FieldNumber = 79;
  inline ::google::protobuf::int32 int_field28() const;
  inline void set_int_field28(::google::protobuf::int32 value);
  
  // optional int32 int_field29 = 80;
  inline bool has_int_field29() const;
  inline void clear_int_field29();
  static const int kIntField29FieldNumber = 80;
  inline ::google::protobuf::int32 int_field29() const;
  inline void set_int_field29(::google::protobuf::int32 value);
  
  // optional int32 int_field30 = 81;
  inline bool has_int_field30() const;
  inline void clear_int_field30();
  static const int kIntField30FieldNumber = 81;
  inline ::google::protobuf::int32 int_field30() const;
  inline void set_int_field30(::google::protobuf::int32 value);
  
  // optional int32 int_field31 = 82;
  inline bool has_int_field31() const;
  inline void clear_int_field31();
  static const int kIntField31FieldNumber = 82;
  inline ::google::protobuf::int32 int_field31() const;
  inline void set_int_field31(::google::protobuf::int32 value);
  
  // optional int32 int_field32 = 83;
  inline bool has_int_field32() const;
  inline void clear_int_field32();
  static const int kIntField32FieldNumber = 83;
  inline ::google::protobuf::int32 int_field32() const;
  inline void set_int_field32(::google::protobuf::int32 value);
  
  // optional int32 int_field33 = 84;
  inline bool has_int_field33() const;
  inline void clear_int_field33();
  static const int kIntField33FieldNumber = 84;
  inline ::google::protobuf::int32 int_field33() const;
  inline void set_int_field33(::google::protobuf::int32 value);
  
  // optional int32 int_field34 = 85;
  inline bool has_int_field34() const;
  inline void clear_int_field34();
  static const int kIntField34FieldNumber = 85;
  inline ::google::protobuf::int32 int_field34() const;
  inline void set_int_field34(::google::protobuf::int32 value);
  
  // optional int32 int_field35 = 86;
  inline bool has_int_field35() const;
  inline void clear_int_field35();
  static const int kIntField35FieldNumber = 86;
  inline ::google::protobuf::int32 int_field35() const;
  inline void set_int_field35(::google::protobuf::int32 value);
  
  // optional int32 int_field36 = 87;
  inline bool has_int_field36() const;
  inline void clear_int_field36();
  static const int kIntField36FieldNumber = 87;
  inline ::google::protobuf::int32 int_field36() const;
  inline void set_int_field36(::google::protobuf::int32 value);
  
  // optional int32 int_field37 = 88;
  inline bool has_int_field37() const;
  inline void clear_int_field37();
  static const int kIntField37FieldNumber = 88;
  inline ::google::protobuf::int32 int_field37() const;
  inline void set_int_field37(::google::protobuf::int32 value);
  
  // optional int32 int_field38 = 89;
  inline bool has_int_field38() const;
  inline void clear_int_field38();
  static const int kIntField38FieldNumber = 89;
  inline ::google::protobuf::int32 int_field38() const;
  inline void set_int_field38(::google::protobuf::int32 value);
  
  // optional int32 int_field39 = 90;
  inline bool has_int_field39() const;
  inline void clear_int_field39();
  static const int kIntField39FieldNumber = 90;
  inline ::google::protobuf::int32 int_field39() const;
  inline void set_int_field39(::google::protobuf::int32 value);
  
  // optional int32 int_field40 = 91;
  inline bool has_int_field40() const;
  inline void clear_int_field40();
  static const int kIntField40FieldNumber = 91;
  inline ::google::protobuf::int32 int_field40() const;
  inline void set_int_field40(::google::protobuf::int32 value);
  
  // optional int32 int_field41 = 92;
  inline bool has_int_field41() const;
  inline void clear_int_field41();
  static const int kIntField41FieldNumber = 92;
  inline ::google::protobuf::int32 int_field41() const;
  inline void set_int_field41(::google::protobuf::int32 value);
  
  // optional int32 int_field42 = 93;
  inline bool has_int_field42() const;
  inline void clear_int_field42();
  static const int kIntField42FieldNumber = 93;
  inline ::google::protobuf::int32 int_field42() const;
  inline void set_int_field42(::google::protobuf::int32 value);
  
  // optional int32 int_field43 = 94;
  inline bool has_int_field43() const;
  inline void clear_int_field43();
  static const int kIntField43FieldNumber = 94;
  inline ::google::protobuf::int32 int_field43() const;
  inline void set_int_field43(::google::protobuf::int32 value);
  
  // optional int32 int_field44 = 95;
  inline bool has_int_field44() const;
  inline void clear_int_field44();
  static const int kIntField44FieldNumber = 95;
  inline ::google::protobuf::int32 int_field44() const;
  inline void set_int_field44(::google::protobuf::int32 value);
  
  // optional int32 int_field45 = 96;
  inline bool has_int_field45() const;
  inline void clear_int_field45();
  static const int kIntField45FieldNumber = 96;
  inline ::google::protobuf::int32 int_field45() const;
  inline void set_int_field45(::google::protobuf::int32 value);
  
  // optional int32 int_field46 = 97;
  inline bool has_int_field46() const;
  inline void clear_int_field46();
  static const int kIntField46FieldNumber = 97;
  inline ::google::protobuf::int32 int_field46() const;
  inline void set_int_field46(::google::protobuf::int32 value);
  
  // optional int32 int_field47 = 98;
  inline bool has_int_field47() const;
  inline void clear_int_field47();
  static const int kIntField47FieldNumber = 98;
  inline ::google::protobuf::int32 int_field47() const;
  inline void set_int_field47(::google::protobuf::int32 value);
  
  // optional int32 int_field48 = 99;
  inline bool has_int_field48() const;
  inline void clear_int_field48();
  static const int kIntField48FieldNumber = 99;
  inline ::google::protobuf::int32 int_field48() const;
  inline void set_int_field48(::google::protobuf::int32 value);
  
  // optional int32 int_field49 = 100;
  inline bool has_int_field49() const;
  inline void clear_int_field49();
  static const int kIntField49FieldNumber = 100;
  inline ::google::protobuf::int32 int_field49() const;
  inline void set_int_field49(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:large.Data)
 private:
  inline void set_has_string_field0();
  inline void clear_has_string_field0();
  inline void set_has_string_field1();
  inline void clear_has_string_field1();
  inline void set_has_string_field2();
  inline void clear_has_string_field2();
  inline void set_has_string_field3();
  inline void clear_has_string_field3();
  inline void set_has_string_field4();
  inline void clear_has_string_field4();
  inline void set_has_string_field5();
  inline void clear_has_string_field5();
  inline void set_has_string_field6();
  inline void clear_has_string_field6();
  inline void set_has_string_field7();
  inline void clear_has_string_field7();
  inline void set_has_string_field8();
  inline void clear_has_string_field8();
  inline void set_has_string_field9();
  inline void clear_has_string_field9();
  inline void set_has_string_field10();
  inline void clear_has_string_field10();
  inline void set_has_string_field11();
  inline void clear_has_string_field11();
  inline void set_has_string_field12();
  inline void clear_has_string_field12();
  inline void set_has_string_field13();
  inline void clear_has_string_field13();
  inline void set_has_string_field14();
  inline void clear_has_string_field14();
  inline void set_has_string_field15();
  inline void clear_has_string_field15();
  inline void set_has_string_field16();
  inline void clear_has_string_field16();
  inline void set_has_string_field17();
  inline void clear_has_string_field17();
  inline void set_has_string_field18();
  inline void clear_has_string_field18();
  inline void set_has_string_field19();
  inline void clear_has_string_field19();
  inline void set_has_string_field20();
  inline void clear_has_string_field20();
  inline void set_has_string_field21();
  inline void clear_has_string_field21();
  inline void set_has_string_field22();
  inline void clear_has_string_field22();
  inline void set_has_string_field23();
  inline void clear_has_string_field23();
  inline void set_has_string_field24();
  inline void clear_has_string_field24();
  inline void set_has_string_field25();
  inline void clear_has_string_field25();
  inline void set_has_string_field26();
  inline void clear_has_string_field26();
  inline void set_has_string_field27();
  inline void clear_has_string_field27();
  inline void set_has_string_field28();
  inline void clear_has_string_field28();
  inline void set_has_string_field29();
  inline void clear_has_string_field29();
  inline void set_has_string_field30();
  inline void clear_has_string_field30();
  inline void set_has_string_field31();
  inline void clear_has_string_field31();
  inline void set_has_string_field32();
  inline void clear_has_string_field32();
  inline void set_has_string_field33();
  inline void clear_has_string_field33();
  inline void set_has_string_field34();
  inline void clear_has_string_field34();
  inline void set_has_string_field35();
  inline void clear_has_string_field35();
  inline void set_has_string_field36();
  inline void clear_has_string_field36();
  inline void set_has_string_field37();
  inline void clear_has_string_field37();
  inline void set_has_string_field38();
  inline void clear_has_string_field38();
  inline void set_has_string_field39();
  inline void clear_has_string_field39();
  inline void set_has_string_field40();
  inline void clear_has_string_field40();
  inline void set_has_string_field41();
  inline void clear_has_string_field41();
  inline void set_has_string_field42();
  inline void clear_has_string_field42();
  inline void set_has_string_field43();
  inline void clear_has_string_field43();
  inline void set_has_string_field44();
  inline void clear_has_string_field44();
  inline void set_has_string_field45();
  inline void clear_has_string_field45();
  inline void set_has_string_field46();
  inline void clear_has_string_field46();
  inline void set_has_string_field47();
  inline void clear_has_string_field47();
  inline void set_has_string_field48();
  inline void clear_has_string_field48();
  inline void set_has_string_field49();
  inline void clear_has_string_field49();
  inline void set_has_int_field0();
  inline void clear_has_int_field0();
  inline void set_has_int_field1();
  inline void clear_has_int_field1();
  inline void set_has_int_field2();
  inline void clear_has_int_field2();
  inline void set_has_int_field3();
  inline void clear_has_int_field3();
  inline void set_has_int_field4();
  inline void clear_has_int_field4();
  inline void set_has_int_field5();
  inline void clear_has_int_field5();
  inline void set_has_int_field6();
  inline void clear_has_int_field6();
  inline void set_has_int_field7();
  inline void clear_has_int_field7();
  inline void set_has_int_field8();
  inline void clear_has_int_field8();
  inline void set_has_int_field9();
  inline void clear_has_int_field9();
  inline void set_has_int_field10();
  inline void clear_has_int_field10();
  inline void set_has_int_field11();
  inline void clear_has_int_field11();
  inline void set_has_int_field12();
  inline void clear_has_int_field12();
  inline void set_has_int_field13();
  inline void clear_has_int_field13();
  inline void set_has_int_field14();
  inline void clear_has_int_field14();
  inline void set_has_int_field15();
  inline void clear_has_int_field15();
  inline void set_has_int_field16();
  inline void clear_has_int_field16();
  inline void set_has_int_field17();
  inline void clear_has_int_field17();
  inline void set_has_int_field18();
  inline void clear_has_int_field18();
  inline void set_has_int_field19();
  inline void clear_has_int_field19();
  inline void set_has_int_field20();
  inline void clear_has_int_field20();
  inline void set_has_int_field21();
  inline void clear_has_int_field21();
  inline void set_has_int_field22();
  inline void clear_has_int_field22();
  inline void set_has_int_field23();
  inline void clear_has_int_field23();
  inline void set_has_int_field24();
  inline void clear_has_int_field24();
  inline void set_has_int_field25();
  inline void clear_has_int_field25();
  inline void set_has_int_field26();
  inline void clear_has_int_field26();
  inline void set_has_int_field27();
  inline void clear_has_int_field27();
  inline void set_has_int_field28();
  inline void clear_has_int_field28();
  inline void set_has_int_field29();
  inline void clear_has_int_field29();
  inline void set_has_int_field30();
  inline void clear_has_int_field30();
  inline void set_has_int_field31();
  inline void clear_has_int_field31();
  inline void set_has_int_field32();
  inline void clear_has_int_field32();
  inline void set_has_int_field33();
  inline void clear_has_int_field33();
  inline void set_has_int_field34();
  inline void clear_has_int_field34();
  inline void set_has_int_field35();
  inline void clear_has_int_field35();
  inline void set_has_int_field36();
  inline void clear_has_int_field36();
  inline void set_has_int_field37();
  inline void clear_has_int_field37();
  inline void set_has_int_field38();
  inline void clear_has_int_field38();
  inline void set_has_int_field39();
  inline void clear_has_int_field39();
  inline void set_has_int_field40();
  inline void clear_has_int_field40();
  inline void set_has_int_field41();
  inline void clear_has_int_field41();
  inline void set_has_int_field42();
  inline void clear_has_int_field42();
  inline void set_has_int_field43();
  inline void clear_has_int_field43();
  inline void set_has_int_field44();
  inline void clear_has_int_field44();
  inline void set_has_int_field45();
  inline void clear_has_int_field45();
  inline void set_has_int_field46();
  inline void clear_has_int_field46();
  inline void set_has_int_field47();
  inline void clear_has_int_field47();
  inline void set_has_int_field48();
  inline void clear_has_int_field48();
  inline void set_has_int_field49();
  inline void clear_has_int_field49();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* string_field0_;
  ::std::string* string_field1_;
  ::std::string* string_field2_;
  ::std::string* string_field3_;
  ::std::string* string_field4_;
  ::std::string* string_field5_;
  ::std::string* string_field6_;
  ::std::string* string_field7_;
  ::std::string* string_field8_;
  ::std::string* string_field9_;
  ::std::string* string_field10_;
  ::std::string* string_field11_;
  ::std::string* string_field12_;
  ::std::string* string_field13_;
  ::std::string* string_field14_;
  ::std::string* string_field15_;
  ::std::string* string_field16_;
  ::std::string* string_field17_;
  ::std::string* string_field18_;
  ::std::string* string_field19_;
  ::std::string* string_field20_;
  ::std::string* string_field21_;
  ::std::string* string_field22_;
  ::std::string* string_field23_;
  ::std::string* string_field24_;
  ::std::string* string_field25_;
  ::std::string* string_field26_;
  ::std::string* string_field27_;
  ::std::string* string_field28_;
  ::std::string* string_field29_;
  ::std::string* string_field30_;
  ::std::string* string_field31_;
  ::std::string* string_field32_;
  ::std::string* string_field33_;
  ::std::string* string_field34_;
  ::std::string* string_field35_;
  ::std::string* string_field36_;
  ::std::string* string_field37_;
  ::std::string* string_field38_;
  ::std::string* string_field39_;
  ::std::string* string_field40_;
  ::std::string* string_field41_;
  ::std::string* string_field42_;
  ::std::string* string_field43_;
  ::std::string* string_field44_;
  ::std::string* string_field45_;
  ::std::string* string_field46_;
  ::std::string* string_field47_;
  ::std::string* string_field48_;
  ::std::string* string_field49_;
  ::google::protobuf::int32 int_field0_;
  ::google::protobuf::int32 int_field1_;
  ::google::protobuf::int32 int_field2_;
  ::google::protobuf::int32 int_field3_;
  ::google::protobuf::int32 int_field4_;
  ::google::protobuf::int32 int_field5_;
  ::google::protobuf::int32 int_field6_;
  ::google::protobuf::int32 int_field7_;
  ::google::protobuf::int32 int_field8_;
  ::google::protobuf::int32 int_field9_;
  ::google::protobuf::int32 int_field10_;
  ::google::protobuf::int32 int_field11_;
  ::google::protobuf::int32 int_field12_;
  ::google::protobuf::int32 int_field13_;
  ::google::protobuf::int32 int_field14_;
  ::google::protobuf::int32 int_field15_;
  ::google::protobuf::int32 int_field16_;
  ::google::protobuf::int32 int_field17_;
  ::google::protobuf::int32 int_field18_;
  ::google::protobuf::int32 int_field19_;
  ::google::protobuf::int32 int_field20_;
  ::google::protobuf::int32 int_field21_;
  ::google::protobuf::int32 int_field22_;
  ::google::protobuf::int32 int_field23_;
  ::google::protobuf::int32 int_field24_;
  ::google::protobuf::int32 int_field25_;
  ::google::protobuf::int32 int_field26_;
  ::google::protobuf::int32 int_field27_;
  ::google::protobuf::int32 int_field28_;
  ::google::protobuf::int32 int_field29_;
  ::google::protobuf::int32 int_field30_;
  ::google::protobuf::int32 int_field31_;
  ::google::protobuf::int32 int_field32_;
  ::google::protobuf::int32 int_field33_;
  ::google::protobuf::int32 int_field34_;
  ::google::protobuf::int32 int_field35_;
  ::google::protobuf::int32 int_field36_;
  ::google::protobuf::int32 int_field37_;
  ::google::protobuf::int32 int_field38_;
  ::google::protobuf::int32 int_field39_;
  ::google::protobuf::int32 int_field40_;
  ::google::protobuf::int32 int_field41_;
  ::google::protobuf::int32 int_field42_;
  ::google::protobuf::int32 int_field43_;
  ::google::protobuf::int32 int_field44_;
  ::google::protobuf::int32 int_field45_;
  ::google::protobuf::int32 int_field46_;
  ::google::protobuf::int32 int_field47_;
  ::google::protobuf::int32 int_field48_;
  ::google::protobuf::int32 int_field49_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(100 + 31) / 32];
  
  friend void  protobuf_AddDesc_large_2eproto();
  friend void protobuf_AssignDesc_large_2eproto();
  friend void protobuf_ShutdownFile_large_2eproto();
  
  void InitAsDefaultInstance();
  static Data* default_instance_;
};
// ===================================================================


// ===================================================================

// Data

// optional string string_field0 = 1;
inline bool Data::has_string_field0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_string_field0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_string_field0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_string_field0() {
  if (string_field0_ != &::google::protobuf::internal::kEmptyString) {
    string_field0_->clear();
  }
  clear_has_string_field0();
}
inline const ::std::string& Data::string_field0() const {
  return *string_field0_;
}
inline void Data::set_string_field0(const ::std::string& value) {
  set_has_string_field0();
  if (string_field0_ == &::google::protobuf::internal::kEmptyString) {
    string_field0_ = new ::std::string;
  }
  string_field0_->assign(value);
}
inline void Data::set_string_field0(const char* value) {
  set_has_string_field0();
  if (string_field0_ == &::google::protobuf::internal::kEmptyString) {
    string_field0_ = new ::std::string;
  }
  string_field0_->assign(value);
}
inline void Data::set_string_field0(const char* value, size_t size) {
  set_has_string_field0();
  if (string_field0_ == &::google::protobuf::internal::kEmptyString) {
    string_field0_ = new ::std::string;
  }
  string_field0_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field0() {
  set_has_string_field0();
  if (string_field0_ == &::google::protobuf::internal::kEmptyString) {
    string_field0_ = new ::std::string;
  }
  return string_field0_;
}
inline ::std::string* Data::release_string_field0() {
  clear_has_string_field0();
  if (string_field0_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field0_;
    string_field0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field1 = 2;
inline bool Data::has_string_field1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_string_field1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_string_field1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_string_field1() {
  if (string_field1_ != &::google::protobuf::internal::kEmptyString) {
    string_field1_->clear();
  }
  clear_has_string_field1();
}
inline const ::std::string& Data::string_field1() const {
  return *string_field1_;
}
inline void Data::set_string_field1(const ::std::string& value) {
  set_has_string_field1();
  if (string_field1_ == &::google::protobuf::internal::kEmptyString) {
    string_field1_ = new ::std::string;
  }
  string_field1_->assign(value);
}
inline void Data::set_string_field1(const char* value) {
  set_has_string_field1();
  if (string_field1_ == &::google::protobuf::internal::kEmptyString) {
    string_field1_ = new ::std::string;
  }
  string_field1_->assign(value);
}
inline void Data::set_string_field1(const char* value, size_t size) {
  set_has_string_field1();
  if (string_field1_ == &::google::protobuf::internal::kEmptyString) {
    string_field1_ = new ::std::string;
  }
  string_field1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field1() {
  set_has_string_field1();
  if (string_field1_ == &::google::protobuf::internal::kEmptyString) {
    string_field1_ = new ::std::string;
  }
  return string_field1_;
}
inline ::std::string* Data::release_string_field1() {
  clear_has_string_field1();
  if (string_field1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field1_;
    string_field1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field2 = 3;
inline bool Data::has_string_field2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Data::set_has_string_field2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Data::clear_has_string_field2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Data::clear_string_field2() {
  if (string_field2_ != &::google::protobuf::internal::kEmptyString) {
    string_field2_->clear();
  }
  clear_has_string_field2();
}
inline const ::std::string& Data::string_field2() const {
  return *string_field2_;
}
inline void Data::set_string_field2(const ::std::string& value) {
  set_has_string_field2();
  if (string_field2_ == &::google::protobuf::internal::kEmptyString) {
    string_field2_ = new ::std::string;
  }
  string_field2_->assign(value);
}
inline void Data::set_string_field2(const char* value) {
  set_has_string_field2();
  if (string_field2_ == &::google::protobuf::internal::kEmptyString) {
    string_field2_ = new ::std::string;
  }
  string_field2_->assign(value);
}
inline void Data::set_string_field2(const char* value, size_t size) {
  set_has_string_field2();
  if (string_field2_ == &::google::protobuf::internal::kEmptyString) {
    string_field2_ = new ::std::string;
  }
  string_field2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field2() {
  set_has_string_field2();
  if (string_field2_ == &::google::protobuf::internal::kEmptyString) {
    string_field2_ = new ::std::string;
  }
  return string_field2_;
}
inline ::std::string* Data::release_string_field2() {
  clear_has_string_field2();
  if (string_field2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field2_;
    string_field2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field3 = 4;
inline bool Data::has_string_field3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Data::set_has_string_field3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Data::clear_has_string_field3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Data::clear_string_field3() {
  if (string_field3_ != &::google::protobuf::internal::kEmptyString) {
    string_field3_->clear();
  }
  clear_has_string_field3();
}
inline const ::std::string& Data::string_field3() const {
  return *string_field3_;
}
inline void Data::set_string_field3(const ::std::string& value) {
  set_has_string_field3();
  if (string_field3_ == &::google::protobuf::internal::kEmptyString) {
    string_field3_ = new ::std::string;
  }
  string_field3_->assign(value);
}
inline void Data::set_string_field3(const char* value) {
  set_has_string_field3();
  if (string_field3_ == &::google::protobuf::internal::kEmptyString) {
    string_field3_ = new ::std::string;
  }
  string_field3_->assign(value);
}
inline void Data::set_string_field3(const char* value, size_t size) {
  set_has_string_field3();
  if (string_field3_ == &::google::protobuf::internal::kEmptyString) {
    string_field3_ = new ::std::string;
  }
  string_field3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field3() {
  set_has_string_field3();
  if (string_field3_ == &::google::protobuf::internal::kEmptyString) {
    string_field3_ = new ::std::string;
  }
  return string_field3_;
}
inline ::std::string* Data::release_string_field3() {
  clear_has_string_field3();
  if (string_field3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field3_;
    string_field3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field4 = 5;
inline bool Data::has_string_field4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Data::set_has_string_field4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Data::clear_has_string_field4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Data::clear_string_field4() {
  if (string_field4_ != &::google::protobuf::internal::kEmptyString) {
    string_field4_->clear();
  }
  clear_has_string_field4();
}
inline const ::std::string& Data::string_field4() const {
  return *string_field4_;
}
inline void Data::set_string_field4(const ::std::string& value) {
  set_has_string_field4();
  if (string_field4_ == &::google::protobuf::internal::kEmptyString) {
    string_field4_ = new ::std::string;
  }
  string_field4_->assign(value);
}
inline void Data::set_string_field4(const char* value) {
  set_has_string_field4();
  if (string_field4_ == &::google::protobuf::internal::kEmptyString) {
    string_field4_ = new ::std::string;
  }
  string_field4_->assign(value);
}
inline void Data::set_string_field4(const char* value, size_t size) {
  set_has_string_field4();
  if (string_field4_ == &::google::protobuf::internal::kEmptyString) {
    string_field4_ = new ::std::string;
  }
  string_field4_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field4() {
  set_has_string_field4();
  if (string_field4_ == &::google::protobuf::internal::kEmptyString) {
    string_field4_ = new ::std::string;
  }
  return string_field4_;
}
inline ::std::string* Data::release_string_field4() {
  clear_has_string_field4();
  if (string_field4_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field4_;
    string_field4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field5 = 6;
inline bool Data::has_string_field5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Data::set_has_string_field5() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Data::clear_has_string_field5() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Data::clear_string_field5() {
  if (string_field5_ != &::google::protobuf::internal::kEmptyString) {
    string_field5_->clear();
  }
  clear_has_string_field5();
}
inline const ::std::string& Data::string_field5() const {
  return *string_field5_;
}
inline void Data::set_string_field5(const ::std::string& value) {
  set_has_string_field5();
  if (string_field5_ == &::google::protobuf::internal::kEmptyString) {
    string_field5_ = new ::std::string;
  }
  string_field5_->assign(value);
}
inline void Data::set_string_field5(const char* value) {
  set_has_string_field5();
  if (string_field5_ == &::google::protobuf::internal::kEmptyString) {
    string_field5_ = new ::std::string;
  }
  string_field5_->assign(value);
}
inline void Data::set_string_field5(const char* value, size_t size) {
  set_has_string_field5();
  if (string_field5_ == &::google::protobuf::internal::kEmptyString) {
    string_field5_ = new ::std::string;
  }
  string_field5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field5() {
  set_has_string_field5();
  if (string_field5_ == &::google::protobuf::internal::kEmptyString) {
    string_field5_ = new ::std::string;
  }
  return string_field5_;
}
inline ::std::string* Data::release_string_field5() {
  clear_has_string_field5();
  if (string_field5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field5_;
    string_field5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field6 = 7;
inline bool Data::has_string_field6() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Data::set_has_string_field6() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Data::clear_has_string_field6() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Data::clear_string_field6() {
  if (string_field6_ != &::google::protobuf::internal::kEmptyString) {
    string_field6_->clear();
  }
  clear_has_string_field6();
}
inline const ::std::string& Data::string_field6() const {
  return *string_field6_;
}
inline void Data::set_string_field6(const ::std::string& value) {
  set_has_string_field6();
  if (string_field6_ == &::google::protobuf::internal::kEmptyString) {
    string_field6_ = new ::std::string;
  }
  string_field6_->assign(value);
}
inline void Data::set_string_field6(const char* value) {
  set_has_string_field6();
  if (string_field6_ == &::google::protobuf::internal::kEmptyString) {
    string_field6_ = new ::std::string;
  }
  string_field6_->assign(value);
}
inline void Data::set_string_field6(const char* value, size_t size) {
  set_has_string_field6();
  if (string_field6_ == &::google::protobuf::internal::kEmptyString) {
    string_field6_ = new ::std::string;
  }
  string_field6_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field6() {
  set_has_string_field6();
  if (string_field6_ == &::google::protobuf::internal::kEmptyString) {
    string_field6_ = new ::std::string;
  }
  return string_field6_;
}
inline ::std::string* Data::release_string_field6() {
  clear_has_string_field6();
  if (string_field6_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field6_;
    string_field6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field7 = 8;
inline bool Data::has_string_field7() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Data::set_has_string_field7() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Data::clear_has_string_field7() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Data::clear_string_field7() {
  if (string_field7_ != &::google::protobuf::internal::kEmptyString) {
    string_field7_->clear();
  }
  clear_has_string_field7();
}
inline const ::std::string& Data::string_field7() const {
  return *string_field7_;
}
inline void Data::set_string_field7(const ::std::string& value) {
  set_has_string_field7();
  if (string_field7_ == &::google::protobuf::internal::kEmptyString) {
    string_field7_ = new ::std::string;
  }
  string_field7_->assign(value);
}
inline void Data::set_string_field7(const char* value) {
  set_has_string_field7();
  if (string_field7_ == &::google::protobuf::internal::kEmptyString) {
    string_field7_ = new ::std::string;
  }
  string_field7_->assign(value);
}
inline void Data::set_string_field7(const char* value, size_t size) {
  set_has_string_field7();
  if (string_field7_ == &::google::protobuf::internal::kEmptyString) {
    string_field7_ = new ::std::string;
  }
  string_field7_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field7() {
  set_has_string_field7();
  if (string_field7_ == &::google::protobuf::internal::kEmptyString) {
    string_field7_ = new ::std::string;
  }
  return string_field7_;
}
inline ::std::string* Data::release_string_field7() {
  clear_has_string_field7();
  if (string_field7_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field7_;
    string_field7_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field8 = 9;
inline bool Data::has_string_field8() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Data::set_has_string_field8() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Data::clear_has_string_field8() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Data::clear_string_field8() {
  if (string_field8_ != &::google::protobuf::internal::kEmptyString) {
    string_field8_->clear();
  }
  clear_has_string_field8();
}
inline const ::std::string& Data::string_field8() const {
  return *string_field8_;
}
inline void Data::set_string_field8(const ::std::string& value) {
  set_has_string_field8();
  if (string_field8_ == &::google::protobuf::internal::kEmptyString) {
    string_field8_ = new ::std::string;
  }
  string_field8_->assign(value);
}
inline void Data::set_string_field8(const char* value) {
  set_has_string_field8();
  if (string_field8_ == &::google::protobuf::internal::kEmptyString) {
    string_field8_ = new ::std::string;
  }
  string_field8_->assign(value);
}
inline void Data::set_string_field8(const char* value, size_t size) {
  set_has_string_field8();
  if (string_field8_ == &::google::protobuf::internal::kEmptyString) {
    string_field8_ = new ::std::string;
  }
  string_field8_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field8() {
  set_has_string_field8();
  if (string_field8_ == &::google::protobuf::internal::kEmptyString) {
    string_field8_ = new ::std::string;
  }
  return string_field8_;
}
inline ::std::string* Data::release_string_field8() {
  clear_has_string_field8();
  if (string_field8_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field8_;
    string_field8_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field9 = 10;
inline bool Data::has_string_field9() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Data::set_has_string_field9() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Data::clear_has_string_field9() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Data::clear_string_field9() {
  if (string_field9_ != &::google::protobuf::internal::kEmptyString) {
    string_field9_->clear();
  }
  clear_has_string_field9();
}
inline const ::std::string& Data::string_field9() const {
  return *string_field9_;
}
inline void Data::set_string_field9(const ::std::string& value) {
  set_has_string_field9();
  if (string_field9_ == &::google::protobuf::internal::kEmptyString) {
    string_field9_ = new ::std::string;
  }
  string_field9_->assign(value);
}
inline void Data::set_string_field9(const char* value) {
  set_has_string_field9();
  if (string_field9_ == &::google::protobuf::internal::kEmptyString) {
    string_field9_ = new ::std::string;
  }
  string_field9_->assign(value);
}
inline void Data::set_string_field9(const char* value, size_t size) {
  set_has_string_field9();
  if (string_field9_ == &::google::protobuf::internal::kEmptyString) {
    string_field9_ = new ::std::string;
  }
  string_field9_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field9() {
  set_has_string_field9();
  if (string_field9_ == &::google::protobuf::internal::kEmptyString) {
    string_field9_ = new ::std::string;
  }
  return string_field9_;
}
inline ::std::string* Data::release_string_field9() {
  clear_has_string_field9();
  if (string_field9_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field9_;
    string_field9_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field10 = 11;
inline bool Data::has_string_field10() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Data::set_has_string_field10() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Data::clear_has_string_field10() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Data::clear_string_field10() {
  if (string_field10_ != &::google::protobuf::internal::kEmptyString) {
    string_field10_->clear();
  }
  clear_has_string_field10();
}
inline const ::std::string& Data::string_field10() const {
  return *string_field10_;
}
inline void Data::set_string_field10(const ::std::string& value) {
  set_has_string_field10();
  if (string_field10_ == &::google::protobuf::internal::kEmptyString) {
    string_field10_ = new ::std::string;
  }
  string_field10_->assign(value);
}
inline void Data::set_string_field10(const char* value) {
  set_has_string_field10();
  if (string_field10_ == &::google::protobuf::internal::kEmptyString) {
    string_field10_ = new ::std::string;
  }
  string_field10_->assign(value);
}
inline void Data::set_string_field10(const char* value, size_t size) {
  set_has_string_field10();
  if (string_field10_ == &::google::protobuf::internal::kEmptyString) {
    string_field10_ = new ::std::string;
  }
  string_field10_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field10() {
  set_has_string_field10();
  if (string_field10_ == &::google::protobuf::internal::kEmptyString) {
    string_field10_ = new ::std::string;
  }
  return string_field10_;
}
inline ::std::string* Data::release_string_field10() {
  clear_has_string_field10();
  if (string_field10_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field10_;
    string_field10_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field11 = 12;
inline bool Data::has_string_field11() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Data::set_has_string_field11() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Data::clear_has_string_field11() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Data::clear_string_field11() {
  if (string_field11_ != &::google::protobuf::internal::kEmptyString) {
    string_field11_->clear();
  }
  clear_has_string_field11();
}
inline const ::std::string& Data::string_field11() const {
  return *string_field11_;
}
inline void Data::set_string_field11(const ::std::string& value) {
  set_has_string_field11();
  if (string_field11_ == &::google::protobuf::internal::kEmptyString) {
    string_field11_ = new ::std::string;
  }
  string_field11_->assign(value);
}
inline void Data::set_string_field11(const char* value) {
  set_has_string_field11();
  if (string_field11_ == &::google::protobuf::internal::kEmptyString) {
    string_field11_ = new ::std::string;
  }
  string_field11_->assign(value);
}
inline void Data::set_string_field11(const char* value, size_t size) {
  set_has_string_field11();
  if (string_field11_ == &::google::protobuf::internal::kEmptyString) {
    string_field11_ = new ::std::string;
  }
  string_field11_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field11() {
  set_has_string_field11();
  if (string_field11_ == &::google::protobuf::internal::kEmptyString) {
    string_field11_ = new ::std::string;
  }
  return string_field11_;
}
inline ::std::string* Data::release_string_field11() {
  clear_has_string_field11();
  if (string_field11_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field11_;
    string_field11_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field12 = 13;
inline bool Data::has_string_field12() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Data::set_has_string_field12() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Data::clear_has_string_field12() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Data::clear_string_field12() {
  if (string_field12_ != &::google::protobuf::internal::kEmptyString) {
    string_field12_->clear();
  }
  clear_has_string_field12();
}
inline const ::std::string& Data::string_field12() const {
  return *string_field12_;
}
inline void Data::set_string_field12(const ::std::string& value) {
  set_has_string_field12();
  if (string_field12_ == &::google::protobuf::internal::kEmptyString) {
    string_field12_ = new ::std::string;
  }
  string_field12_->assign(value);
}
inline void Data::set_string_field12(const char* value) {
  set_has_string_field12();
  if (string_field12_ == &::google::protobuf::internal::kEmptyString) {
    string_field12_ = new ::std::string;
  }
  string_field12_->assign(value);
}
inline void Data::set_string_field12(const char* value, size_t size) {
  set_has_string_field12();
  if (string_field12_ == &::google::protobuf::internal::kEmptyString) {
    string_field12_ = new ::std::string;
  }
  string_field12_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field12() {
  set_has_string_field12();
  if (string_field12_ == &::google::protobuf::internal::kEmptyString) {
    string_field12_ = new ::std::string;
  }
  return string_field12_;
}
inline ::std::string* Data::release_string_field12() {
  clear_has_string_field12();
  if (string_field12_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field12_;
    string_field12_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field13 = 14;
inline bool Data::has_string_field13() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Data::set_has_string_field13() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Data::clear_has_string_field13() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Data::clear_string_field13() {
  if (string_field13_ != &::google::protobuf::internal::kEmptyString) {
    string_field13_->clear();
  }
  clear_has_string_field13();
}
inline const ::std::string& Data::string_field13() const {
  return *string_field13_;
}
inline void Data::set_string_field13(const ::std::string& value) {
  set_has_string_field13();
  if (string_field13_ == &::google::protobuf::internal::kEmptyString) {
    string_field13_ = new ::std::string;
  }
  string_field13_->assign(value);
}
inline void Data::set_string_field13(const char* value) {
  set_has_string_field13();
  if (string_field13_ == &::google::protobuf::internal::kEmptyString) {
    string_field13_ = new ::std::string;
  }
  string_field13_->assign(value);
}
inline void Data::set_string_field13(const char* value, size_t size) {
  set_has_string_field13();
  if (string_field13_ == &::google::protobuf::internal::kEmptyString) {
    string_field13_ = new ::std::string;
  }
  string_field13_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field13() {
  set_has_string_field13();
  if (string_field13_ == &::google::protobuf::internal::kEmptyString) {
    string_field13_ = new ::std::string;
  }
  return string_field13_;
}
inline ::std::string* Data::release_string_field13() {
  clear_has_string_field13();
  if (string_field13_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field13_;
    string_field13_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field14 = 15;
inline bool Data::has_string_field14() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Data::set_has_string_field14() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Data::clear_has_string_field14() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Data::clear_string_field14() {
  if (string_field14_ != &::google::protobuf::internal::kEmptyString) {
    string_field14_->clear();
  }
  clear_has_string_field14();
}
inline const ::std::string& Data::string_field14() const {
  return *string_field14_;
}
inline void Data::set_string_field14(const ::std::string& value) {
  set_has_string_field14();
  if (string_field14_ == &::google::protobuf::internal::kEmptyString) {
    string_field14_ = new ::std::string;
  }
  string_field14_->assign(value);
}
inline void Data::set_string_field14(const char* value) {
  set_has_string_field14();
  if (string_field14_ == &::google::protobuf::internal::kEmptyString) {
    string_field14_ = new ::std::string;
  }
  string_field14_->assign(value);
}
inline void Data::set_string_field14(const char* value, size_t size) {
  set_has_string_field14();
  if (string_field14_ == &::google::protobuf::internal::kEmptyString) {
    string_field14_ = new ::std::string;
  }
  string_field14_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field14() {
  set_has_string_field14();
  if (string_field14_ == &::google::protobuf::internal::kEmptyString) {
    string_field14_ = new ::std::string;
  }
  return string_field14_;
}
inline ::std::string* Data::release_string_field14() {
  clear_has_string_field14();
  if (string_field14_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field14_;
    string_field14_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field15 = 16;
inline bool Data::has_string_field15() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Data::set_has_string_field15() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Data::clear_has_string_field15() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Data::clear_string_field15() {
  if (string_field15_ != &::google::protobuf::internal::kEmptyString) {
    string_field15_->clear();
  }
  clear_has_string_field15();
}
inline const ::std::string& Data::string_field15() const {
  return *string_field15_;
}
inline void Data::set_string_field15(const ::std::string& value) {
  set_has_string_field15();
  if (string_field15_ == &::google::protobuf::internal::kEmptyString) {
    string_field15_ = new ::std::string;
  }
  string_field15_->assign(value);
}
inline void Data::set_string_field15(const char* value) {
  set_has_string_field15();
  if (string_field15_ == &::google::protobuf::internal::kEmptyString) {
    string_field15_ = new ::std::string;
  }
  string_field15_->assign(value);
}
inline void Data::set_string_field15(const char* value, size_t size) {
  set_has_string_field15();
  if (string_field15_ == &::google::protobuf::internal::kEmptyString) {
    string_field15_ = new ::std::string;
  }
  string_field15_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field15() {
  set_has_string_field15();
  if (string_field15_ == &::google::protobuf::internal::kEmptyString) {
    string_field15_ = new ::std::string;
  }
  return string_field15_;
}
inline ::std::string* Data::release_string_field15() {
  clear_has_string_field15();
  if (string_field15_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field15_;
    string_field15_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field16 = 17;
inline bool Data::has_string_field16() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Data::set_has_string_field16() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Data::clear_has_string_field16() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Data::clear_string_field16() {
  if (string_field16_ != &::google::protobuf::internal::kEmptyString) {
    string_field16_->clear();
  }
  clear_has_string_field16();
}
inline const ::std::string& Data::string_field16() const {
  return *string_field16_;
}
inline void Data::set_string_field16(const ::std::string& value) {
  set_has_string_field16();
  if (string_field16_ == &::google::protobuf::internal::kEmptyString) {
    string_field16_ = new ::std::string;
  }
  string_field16_->assign(value);
}
inline void Data::set_string_field16(const char* value) {
  set_has_string_field16();
  if (string_field16_ == &::google::protobuf::internal::kEmptyString) {
    string_field16_ = new ::std::string;
  }
  string_field16_->assign(value);
}
inline void Data::set_string_field16(const char* value, size_t size) {
  set_has_string_field16();
  if (string_field16_ == &::google::protobuf::internal::kEmptyString) {
    string_field16_ = new ::std::string;
  }
  string_field16_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field16() {
  set_has_string_field16();
  if (string_field16_ == &::google::protobuf::internal::kEmptyString) {
    string_field16_ = new ::std::string;
  }
  return string_field16_;
}
inline ::std::string* Data::release_string_field16() {
  clear_has_string_field16();
  if (string_field16_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field16_;
    string_field16_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field17 = 18;
inline bool Data::has_string_field17() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Data::set_has_string_field17() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Data::clear_has_string_field17() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Data::clear_string_field17() {
  if (string_field17_ != &::google::protobuf::internal::kEmptyString) {
    string_field17_->clear();
  }
  clear_has_string_field17();
}
inline const ::std::string& Data::string_field17() const {
  return *string_field17_;
}
inline void Data::set_string_field17(const ::std::string& value) {
  set_has_string_field17();
  if (string_field17_ == &::google::protobuf::internal::kEmptyString) {
    string_field17_ = new ::std::string;
  }
  string_field17_->assign(value);
}
inline void Data::set_string_field17(const char* value) {
  set_has_string_field17();
  if (string_field17_ == &::google::protobuf::internal::kEmptyString) {
    string_field17_ = new ::std::string;
  }
  string_field17_->assign(value);
}
inline void Data::set_string_field17(const char* value, size_t size) {
  set_has_string_field17();
  if (string_field17_ == &::google::protobuf::internal::kEmptyString) {
    string_field17_ = new ::std::string;
  }
  string_field17_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field17() {
  set_has_string_field17();
  if (string_field17_ == &::google::protobuf::internal::kEmptyString) {
    string_field17_ = new ::std::string;
  }
  return string_field17_;
}
inline ::std::string* Data::release_string_field17() {
  clear_has_string_field17();
  if (string_field17_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field17_;
    string_field17_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field18 = 19;
inline bool Data::has_string_field18() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Data::set_has_string_field18() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Data::clear_has_string_field18() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Data::clear_string_field18() {
  if (string_field18_ != &::google::protobuf::internal::kEmptyString) {
    string_field18_->clear();
  }
  clear_has_string_field18();
}
inline const ::std::string& Data::string_field18() const {
  return *string_field18_;
}
inline void Data::set_string_field18(const ::std::string& value) {
  set_has_string_field18();
  if (string_field18_ == &::google::protobuf::internal::kEmptyString) {
    string_field18_ = new ::std::string;
  }
  string_field18_->assign(value);
}
inline void Data::set_string_field18(const char* value) {
  set_has_string_field18();
  if (string_field18_ == &::google::protobuf::internal::kEmptyString) {
    string_field18_ = new ::std::string;
  }
  string_field18_->assign(value);
}
inline void Data::set_string_field18(const char* value, size_t size) {
  set_has_string_field18();
  if (string_field18_ == &::google::protobuf::internal::kEmptyString) {
    string_field18_ = new ::std::string;
  }
  string_field18_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field18() {
  set_has_string_field18();
  if (string_field18_ == &::google::protobuf::internal::kEmptyString) {
    string_field18_ = new ::std::string;
  }
  return string_field18_;
}
inline ::std::string* Data::release_string_field18() {
  clear_has_string_field18();
  if (string_field18_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field18_;
    string_field18_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field19 = 20;
inline bool Data::has_string_field19() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Data::set_has_string_field19() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Data::clear_has_string_field19() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Data::clear_string_field19() {
  if (string_field19_ != &::google::protobuf::internal::kEmptyString) {
    string_field19_->clear();
  }
  clear_has_string_field19();
}
inline const ::std::string& Data::string_field19() const {
  return *string_field19_;
}
inline void Data::set_string_field19(const ::std::string& value) {
  set_has_string_field19();
  if (string_field19_ == &::google::protobuf::internal::kEmptyString) {
    string_field19_ = new ::std::string;
  }
  string_field19_->assign(value);
}
inline void Data::set_string_field19(const char* value) {
  set_has_string_field19();
  if (string_field19_ == &::google::protobuf::internal::kEmptyString) {
    string_field19_ = new ::std::string;
  }
  string_field19_->assign(value);
}
inline void Data::set_string_field19(const char* value, size_t size) {
  set_has_string_field19();
  if (string_field19_ == &::google::protobuf::internal::kEmptyString) {
    string_field19_ = new ::std::string;
  }
  string_field19_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field19() {
  set_has_string_field19();
  if (string_field19_ == &::google::protobuf::internal::kEmptyString) {
    string_field19_ = new ::std::string;
  }
  return string_field19_;
}
inline ::std::string* Data::release_string_field19() {
  clear_has_string_field19();
  if (string_field19_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field19_;
    string_field19_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field20 = 21;
inline bool Data::has_string_field20() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Data::set_has_string_field20() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Data::clear_has_string_field20() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Data::clear_string_field20() {
  if (string_field20_ != &::google::protobuf::internal::kEmptyString) {
    string_field20_->clear();
  }
  clear_has_string_field20();
}
inline const ::std::string& Data::string_field20() const {
  return *string_field20_;
}
inline void Data::set_string_field20(const ::std::string& value) {
  set_has_string_field20();
  if (string_field20_ == &::google::protobuf::internal::kEmptyString) {
    string_field20_ = new ::std::string;
  }
  string_field20_->assign(value);
}
inline void Data::set_string_field20(const char* value) {
  set_has_string_field20();
  if (string_field20_ == &::google::protobuf::internal::kEmptyString) {
    string_field20_ = new ::std::string;
  }
  string_field20_->assign(value);
}
inline void Data::set_string_field20(const char* value, size_t size) {
  set_has_string_field20();
  if (string_field20_ == &::google::protobuf::internal::kEmptyString) {
    string_field20_ = new ::std::string;
  }
  string_field20_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field20() {
  set_has_string_field20();
  if (string_field20_ == &::google::protobuf::internal::kEmptyString) {
    string_field20_ = new ::std::string;
  }
  return string_field20_;
}
inline ::std::string* Data::release_string_field20() {
  clear_has_string_field20();
  if (string_field20_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field20_;
    string_field20_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field21 = 22;
inline bool Data::has_string_field21() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Data::set_has_string_field21() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Data::clear_has_string_field21() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Data::clear_string_field21() {
  if (string_field21_ != &::google::protobuf::internal::kEmptyString) {
    string_field21_->clear();
  }
  clear_has_string_field21();
}
inline const ::std::string& Data::string_field21() const {
  return *string_field21_;
}
inline void Data::set_string_field21(const ::std::string& value) {
  set_has_string_field21();
  if (string_field21_ == &::google::protobuf::internal::kEmptyString) {
    string_field21_ = new ::std::string;
  }
  string_field21_->assign(value);
}
inline void Data::set_string_field21(const char* value) {
  set_has_string_field21();
  if (string_field21_ == &::google::protobuf::internal::kEmptyString) {
    string_field21_ = new ::std::string;
  }
  string_field21_->assign(value);
}
inline void Data::set_string_field21(const char* value, size_t size) {
  set_has_string_field21();
  if (string_field21_ == &::google::protobuf::internal::kEmptyString) {
    string_field21_ = new ::std::string;
  }
  string_field21_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field21() {
  set_has_string_field21();
  if (string_field21_ == &::google::protobuf::internal::kEmptyString) {
    string_field21_ = new ::std::string;
  }
  return string_field21_;
}
inline ::std::string* Data::release_string_field21() {
  clear_has_string_field21();
  if (string_field21_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field21_;
    string_field21_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field22 = 23;
inline bool Data::has_string_field22() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Data::set_has_string_field22() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Data::clear_has_string_field22() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Data::clear_string_field22() {
  if (string_field22_ != &::google::protobuf::internal::kEmptyString) {
    string_field22_->clear();
  }
  clear_has_string_field22();
}
inline const ::std::string& Data::string_field22() const {
  return *string_field22_;
}
inline void Data::set_string_field22(const ::std::string& value) {
  set_has_string_field22();
  if (string_field22_ == &::google::protobuf::internal::kEmptyString) {
    string_field22_ = new ::std::string;
  }
  string_field22_->assign(value);
}
inline void Data::set_string_field22(const char* value) {
  set_has_string_field22();
  if (string_field22_ == &::google::protobuf::internal::kEmptyString) {
    string_field22_ = new ::std::string;
  }
  string_field22_->assign(value);
}
inline void Data::set_string_field22(const char* value, size_t size) {
  set_has_string_field22();
  if (string_field22_ == &::google::protobuf::internal::kEmptyString) {
    string_field22_ = new ::std::string;
  }
  string_field22_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field22() {
  set_has_string_field22();
  if (string_field22_ == &::google::protobuf::internal::kEmptyString) {
    string_field22_ = new ::std::string;
  }
  return string_field22_;
}
inline ::std::string* Data::release_string_field22() {
  clear_has_string_field22();
  if (string_field22_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field22_;
    string_field22_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field23 = 24;
inline bool Data::has_string_field23() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Data::set_has_string_field23() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Data::clear_has_string_field23() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Data::clear_string_field23() {
  if (string_field23_ != &::google::protobuf::internal::kEmptyString) {
    string_field23_->clear();
  }
  clear_has_string_field23();
}
inline const ::std::string& Data::string_field23() const {
  return *string_field23_;
}
inline void Data::set_string_field23(const ::std::string& value) {
  set_has_string_field23();
  if (string_field23_ == &::google::protobuf::internal::kEmptyString) {
    string_field23_ = new ::std::string;
  }
  string_field23_->assign(value);
}
inline void Data::set_string_field23(const char* value) {
  set_has_string_field23();
  if (string_field23_ == &::google::protobuf::internal::kEmptyString) {
    string_field23_ = new ::std::string;
  }
  string_field23_->assign(value);
}
inline void Data::set_string_field23(const char* value, size_t size) {
  set_has_string_field23();
  if (string_field23_ == &::google::protobuf::internal::kEmptyString) {
    string_field23_ = new ::std::string;
  }
  string_field23_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field23() {
  set_has_string_field23();
  if (string_field23_ == &::google::protobuf::internal::kEmptyString) {
    string_field23_ = new ::std::string;
  }
  return string_field23_;
}
inline ::std::string* Data::release_string_field23() {
  clear_has_string_field23();
  if (string_field23_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field23_;
    string_field23_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field24 = 25;
inline bool Data::has_string_field24() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Data::set_has_string_field24() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Data::clear_has_string_field24() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Data::clear_string_field24() {
  if (string_field24_ != &::google::protobuf::internal::kEmptyString) {
    string_field24_->clear();
  }
  clear_has_string_field24();
}
inline const ::std::string& Data::string_field24() const {
  return *string_field24_;
}
inline void Data::set_string_field24(const ::std::string& value) {
  set_has_string_field24();
  if (string_field24_ == &::google::protobuf::internal::kEmptyString) {
    string_field24_ = new ::std::string;
  }
  string_field24_->assign(value);
}
inline void Data::set_string_field24(const char* value) {
  set_has_string_field24();
  if (string_field24_ == &::google::protobuf::internal::kEmptyString) {
    string_field24_ = new ::std::string;
  }
  string_field24_->assign(value);
}
inline void Data::set_string_field24(const char* value, size_t size) {
  set_has_string_field24();
  if (string_field24_ == &::google::protobuf::internal::kEmptyString) {
    string_field24_ = new ::std::string;
  }
  string_field24_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field24() {
  set_has_string_field24();
  if (string_field24_ == &::google::protobuf::internal::kEmptyString) {
    string_field24_ = new ::std::string;
  }
  return string_field24_;
}
inline ::std::string* Data::release_string_field24() {
  clear_has_string_field24();
  if (string_field24_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field24_;
    string_field24_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field25 = 26;
inline bool Data::has_string_field25() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Data::set_has_string_field25() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Data::clear_has_string_field25() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Data::clear_string_field25() {
  if (string_field25_ != &::google::protobuf::internal::kEmptyString) {
    string_field25_->clear();
  }
  clear_has_string_field25();
}
inline const ::std::string& Data::string_field25() const {
  return *string_field25_;
}
inline void Data::set_string_field25(const ::std::string& value) {
  set_has_string_field25();
  if (string_field25_ == &::google::protobuf::internal::kEmptyString) {
    string_field25_ = new ::std::string;
  }
  string_field25_->assign(value);
}
inline void Data::set_string_field25(const char* value) {
  set_has_string_field25();
  if (string_field25_ == &::google::protobuf::internal::kEmptyString) {
    string_field25_ = new ::std::string;
  }
  string_field25_->assign(value);
}
inline void Data::set_string_field25(const char* value, size_t size) {
  set_has_string_field25();
  if (string_field25_ == &::google::protobuf::internal::kEmptyString) {
    string_field25_ = new ::std::string;
  }
  string_field25_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field25() {
  set_has_string_field25();
  if (string_field25_ == &::google::protobuf::internal::kEmptyString) {
    string_field25_ = new ::std::string;
  }
  return string_field25_;
}
inline ::std::string* Data::release_string_field25() {
  clear_has_string_field25();
  if (string_field25_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field25_;
    string_field25_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field26 = 27;
inline bool Data::has_string_field26() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Data::set_has_string_field26() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Data::clear_has_string_field26() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Data::clear_string_field26() {
  if (string_field26_ != &::google::protobuf::internal::kEmptyString) {
    string_field26_->clear();
  }
  clear_has_string_field26();
}
inline const ::std::string& Data::string_field26() const {
  return *string_field26_;
}
inline void Data::set_string_field26(const ::std::string& value) {
  set_has_string_field26();
  if (string_field26_ == &::google::protobuf::internal::kEmptyString) {
    string_field26_ = new ::std::string;
  }
  string_field26_->assign(value);
}
inline void Data::set_string_field26(const char* value) {
  set_has_string_field26();
  if (string_field26_ == &::google::protobuf::internal::kEmptyString) {
    string_field26_ = new ::std::string;
  }
  string_field26_->assign(value);
}
inline void Data::set_string_field26(const char* value, size_t size) {
  set_has_string_field26();
  if (string_field26_ == &::google::protobuf::internal::kEmptyString) {
    string_field26_ = new ::std::string;
  }
  string_field26_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field26() {
  set_has_string_field26();
  if (string_field26_ == &::google::protobuf::internal::kEmptyString) {
    string_field26_ = new ::std::string;
  }
  return string_field26_;
}
inline ::std::string* Data::release_string_field26() {
  clear_has_string_field26();
  if (string_field26_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field26_;
    string_field26_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field27 = 28;
inline bool Data::has_string_field27() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Data::set_has_string_field27() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Data::clear_has_string_field27() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Data::clear_string_field27() {
  if (string_field27_ != &::google::protobuf::internal::kEmptyString) {
    string_field27_->clear();
  }
  clear_has_string_field27();
}
inline const ::std::string& Data::string_field27() const {
  return *string_field27_;
}
inline void Data::set_string_field27(const ::std::string& value) {
  set_has_string_field27();
  if (string_field27_ == &::google::protobuf::internal::kEmptyString) {
    string_field27_ = new ::std::string;
  }
  string_field27_->assign(value);
}
inline void Data::set_string_field27(const char* value) {
  set_has_string_field27();
  if (string_field27_ == &::google::protobuf::internal::kEmptyString) {
    string_field27_ = new ::std::string;
  }
  string_field27_->assign(value);
}
inline void Data::set_string_field27(const char* value, size_t size) {
  set_has_string_field27();
  if (string_field27_ == &::google::protobuf::internal::kEmptyString) {
    string_field27_ = new ::std::string;
  }
  string_field27_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field27() {
  set_has_string_field27();
  if (string_field27_ == &::google::protobuf::internal::kEmptyString) {
    string_field27_ = new ::std::string;
  }
  return string_field27_;
}
inline ::std::string* Data::release_string_field27() {
  clear_has_string_field27();
  if (string_field27_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field27_;
    string_field27_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field28 = 29;
inline bool Data::has_string_field28() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Data::set_has_string_field28() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Data::clear_has_string_field28() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Data::clear_string_field28() {
  if (string_field28_ != &::google::protobuf::internal::kEmptyString) {
    string_field28_->clear();
  }
  clear_has_string_field28();
}
inline const ::std::string& Data::string_field28() const {
  return *string_field28_;
}
inline void Data::set_string_field28(const ::std::string& value) {
  set_has_string_field28();
  if (string_field28_ == &::google::protobuf::internal::kEmptyString) {
    string_field28_ = new ::std::string;
  }
  string_field28_->assign(value);
}
inline void Data::set_string_field28(const char* value) {
  set_has_string_field28();
  if (string_field28_ == &::google::protobuf::internal::kEmptyString) {
    string_field28_ = new ::std::string;
  }
  string_field28_->assign(value);
}
inline void Data::set_string_field28(const char* value, size_t size) {
  set_has_string_field28();
  if (string_field28_ == &::google::protobuf::internal::kEmptyString) {
    string_field28_ = new ::std::string;
  }
  string_field28_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field28() {
  set_has_string_field28();
  if (string_field28_ == &::google::protobuf::internal::kEmptyString) {
    string_field28_ = new ::std::string;
  }
  return string_field28_;
}
inline ::std::string* Data::release_string_field28() {
  clear_has_string_field28();
  if (string_field28_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field28_;
    string_field28_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field29 = 30;
inline bool Data::has_string_field29() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Data::set_has_string_field29() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Data::clear_has_string_field29() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Data::clear_string_field29() {
  if (string_field29_ != &::google::protobuf::internal::kEmptyString) {
    string_field29_->clear();
  }
  clear_has_string_field29();
}
inline const ::std::string& Data::string_field29() const {
  return *string_field29_;
}
inline void Data::set_string_field29(const ::std::string& value) {
  set_has_string_field29();
  if (string_field29_ == &::google::protobuf::internal::kEmptyString) {
    string_field29_ = new ::std::string;
  }
  string_field29_->assign(value);
}
inline void Data::set_string_field29(const char* value) {
  set_has_string_field29();
  if (string_field29_ == &::google::protobuf::internal::kEmptyString) {
    string_field29_ = new ::std::string;
  }
  string_field29_->assign(value);
}
inline void Data::set_string_field29(const char* value, size_t size) {
  set_has_string_field29();
  if (string_field29_ == &::google::protobuf::internal::kEmptyString) {
    string_field29_ = new ::std::string;
  }
  string_field29_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field29() {
  set_has_string_field29();
  if (string_field29_ == &::google::protobuf::internal::kEmptyString) {
    string_field29_ = new ::std::string;
  }
  return string_field29_;
}
inline ::std::string* Data::release_string_field29() {
  clear_has_string_field29();
  if (string_field29_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field29_;
    string_field29_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field30 = 31;
inline bool Data::has_string_field30() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Data::set_has_string_field30() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Data::clear_has_string_field30() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Data::clear_string_field30() {
  if (string_field30_ != &::google::protobuf::internal::kEmptyString) {
    string_field30_->clear();
  }
  clear_has_string_field30();
}
inline const ::std::string& Data::string_field30() const {
  return *string_field30_;
}
inline void Data::set_string_field30(const ::std::string& value) {
  set_has_string_field30();
  if (string_field30_ == &::google::protobuf::internal::kEmptyString) {
    string_field30_ = new ::std::string;
  }
  string_field30_->assign(value);
}
inline void Data::set_string_field30(const char* value) {
  set_has_string_field30();
  if (string_field30_ == &::google::protobuf::internal::kEmptyString) {
    string_field30_ = new ::std::string;
  }
  string_field30_->assign(value);
}
inline void Data::set_string_field30(const char* value, size_t size) {
  set_has_string_field30();
  if (string_field30_ == &::google::protobuf::internal::kEmptyString) {
    string_field30_ = new ::std::string;
  }
  string_field30_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field30() {
  set_has_string_field30();
  if (string_field30_ == &::google::protobuf::internal::kEmptyString) {
    string_field30_ = new ::std::string;
  }
  return string_field30_;
}
inline ::std::string* Data::release_string_field30() {
  clear_has_string_field30();
  if (string_field30_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field30_;
    string_field30_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field31 = 32;
inline bool Data::has_string_field31() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Data::set_has_string_field31() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Data::clear_has_string_field31() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Data::clear_string_field31() {
  if (string_field31_ != &::google::protobuf::internal::kEmptyString) {
    string_field31_->clear();
  }
  clear_has_string_field31();
}
inline const ::std::string& Data::string_field31() const {
  return *string_field31_;
}
inline void Data::set_string_field31(const ::std::string& value) {
  set_has_string_field31();
  if (string_field31_ == &::google::protobuf::internal::kEmptyString) {
    string_field31_ = new ::std::string;
  }
  string_field31_->assign(value);
}
inline void Data::set_string_field31(const char* value) {
  set_has_string_field31();
  if (string_field31_ == &::google::protobuf::internal::kEmptyString) {
    string_field31_ = new ::std::string;
  }
  string_field31_->assign(value);
}
inline void Data::set_string_field31(const char* value, size_t size) {
  set_has_string_field31();
  if (string_field31_ == &::google::protobuf::internal::kEmptyString) {
    string_field31_ = new ::std::string;
  }
  string_field31_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field31() {
  set_has_string_field31();
  if (string_field31_ == &::google::protobuf::internal::kEmptyString) {
    string_field31_ = new ::std::string;
  }
  return string_field31_;
}
inline ::std::string* Data::release_string_field31() {
  clear_has_string_field31();
  if (string_field31_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field31_;
    string_field31_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field32 = 33;
inline bool Data::has_string_field32() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Data::set_has_string_field32() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Data::clear_has_string_field32() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Data::clear_string_field32() {
  if (string_field32_ != &::google::protobuf::internal::kEmptyString) {
    string_field32_->clear();
  }
  clear_has_string_field32();
}
inline const ::std::string& Data::string_field32() const {
  return *string_field32_;
}
inline void Data::set_string_field32(const ::std::string& value) {
  set_has_string_field32();
  if (string_field32_ == &::google::protobuf::internal::kEmptyString) {
    string_field32_ = new ::std::string;
  }
  string_field32_->assign(value);
}
inline void Data::set_string_field32(const char* value) {
  set_has_string_field32();
  if (string_field32_ == &::google::protobuf::internal::kEmptyString) {
    string_field32_ = new ::std::string;
  }
  string_field32_->assign(value);
}
inline void Data::set_string_field32(const char* value, size_t size) {
  set_has_string_field32();
  if (string_field32_ == &::google::protobuf::internal::kEmptyString) {
    string_field32_ = new ::std::string;
  }
  string_field32_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field32() {
  set_has_string_field32();
  if (string_field32_ == &::google::protobuf::internal::kEmptyString) {
    string_field32_ = new ::std::string;
  }
  return string_field32_;
}
inline ::std::string* Data::release_string_field32() {
  clear_has_string_field32();
  if (string_field32_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field32_;
    string_field32_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field33 = 34;
inline bool Data::has_string_field33() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Data::set_has_string_field33() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Data::clear_has_string_field33() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Data::clear_string_field33() {
  if (string_field33_ != &::google::protobuf::internal::kEmptyString) {
    string_field33_->clear();
  }
  clear_has_string_field33();
}
inline const ::std::string& Data::string_field33() const {
  return *string_field33_;
}
inline void Data::set_string_field33(const ::std::string& value) {
  set_has_string_field33();
  if (string_field33_ == &::google::protobuf::internal::kEmptyString) {
    string_field33_ = new ::std::string;
  }
  string_field33_->assign(value);
}
inline void Data::set_string_field33(const char* value) {
  set_has_string_field33();
  if (string_field33_ == &::google::protobuf::internal::kEmptyString) {
    string_field33_ = new ::std::string;
  }
  string_field33_->assign(value);
}
inline void Data::set_string_field33(const char* value, size_t size) {
  set_has_string_field33();
  if (string_field33_ == &::google::protobuf::internal::kEmptyString) {
    string_field33_ = new ::std::string;
  }
  string_field33_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field33() {
  set_has_string_field33();
  if (string_field33_ == &::google::protobuf::internal::kEmptyString) {
    string_field33_ = new ::std::string;
  }
  return string_field33_;
}
inline ::std::string* Data::release_string_field33() {
  clear_has_string_field33();
  if (string_field33_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field33_;
    string_field33_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field34 = 35;
inline bool Data::has_string_field34() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Data::set_has_string_field34() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Data::clear_has_string_field34() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Data::clear_string_field34() {
  if (string_field34_ != &::google::protobuf::internal::kEmptyString) {
    string_field34_->clear();
  }
  clear_has_string_field34();
}
inline const ::std::string& Data::string_field34() const {
  return *string_field34_;
}
inline void Data::set_string_field34(const ::std::string& value) {
  set_has_string_field34();
  if (string_field34_ == &::google::protobuf::internal::kEmptyString) {
    string_field34_ = new ::std::string;
  }
  string_field34_->assign(value);
}
inline void Data::set_string_field34(const char* value) {
  set_has_string_field34();
  if (string_field34_ == &::google::protobuf::internal::kEmptyString) {
    string_field34_ = new ::std::string;
  }
  string_field34_->assign(value);
}
inline void Data::set_string_field34(const char* value, size_t size) {
  set_has_string_field34();
  if (string_field34_ == &::google::protobuf::internal::kEmptyString) {
    string_field34_ = new ::std::string;
  }
  string_field34_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field34() {
  set_has_string_field34();
  if (string_field34_ == &::google::protobuf::internal::kEmptyString) {
    string_field34_ = new ::std::string;
  }
  return string_field34_;
}
inline ::std::string* Data::release_string_field34() {
  clear_has_string_field34();
  if (string_field34_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field34_;
    string_field34_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field35 = 36;
inline bool Data::has_string_field35() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Data::set_has_string_field35() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Data::clear_has_string_field35() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Data::clear_string_field35() {
  if (string_field35_ != &::google::protobuf::internal::kEmptyString) {
    string_field35_->clear();
  }
  clear_has_string_field35();
}
inline const ::std::string& Data::string_field35() const {
  return *string_field35_;
}
inline void Data::set_string_field35(const ::std::string& value) {
  set_has_string_field35();
  if (string_field35_ == &::google::protobuf::internal::kEmptyString) {
    string_field35_ = new ::std::string;
  }
  string_field35_->assign(value);
}
inline void Data::set_string_field35(const char* value) {
  set_has_string_field35();
  if (string_field35_ == &::google::protobuf::internal::kEmptyString) {
    string_field35_ = new ::std::string;
  }
  string_field35_->assign(value);
}
inline void Data::set_string_field35(const char* value, size_t size) {
  set_has_string_field35();
  if (string_field35_ == &::google::protobuf::internal::kEmptyString) {
    string_field35_ = new ::std::string;
  }
  string_field35_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field35() {
  set_has_string_field35();
  if (string_field35_ == &::google::protobuf::internal::kEmptyString) {
    string_field35_ = new ::std::string;
  }
  return string_field35_;
}
inline ::std::string* Data::release_string_field35() {
  clear_has_string_field35();
  if (string_field35_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field35_;
    string_field35_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field36 = 37;
inline bool Data::has_string_field36() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Data::set_has_string_field36() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Data::clear_has_string_field36() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Data::clear_string_field36() {
  if (string_field36_ != &::google::protobuf::internal::kEmptyString) {
    string_field36_->clear();
  }
  clear_has_string_field36();
}
inline const ::std::string& Data::string_field36() const {
  return *string_field36_;
}
inline void Data::set_string_field36(const ::std::string& value) {
  set_has_string_field36();
  if (string_field36_ == &::google::protobuf::internal::kEmptyString) {
    string_field36_ = new ::std::string;
  }
  string_field36_->assign(value);
}
inline void Data::set_string_field36(const char* value) {
  set_has_string_field36();
  if (string_field36_ == &::google::protobuf::internal::kEmptyString) {
    string_field36_ = new ::std::string;
  }
  string_field36_->assign(value);
}
inline void Data::set_string_field36(const char* value, size_t size) {
  set_has_string_field36();
  if (string_field36_ == &::google::protobuf::internal::kEmptyString) {
    string_field36_ = new ::std::string;
  }
  string_field36_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field36() {
  set_has_string_field36();
  if (string_field36_ == &::google::protobuf::internal::kEmptyString) {
    string_field36_ = new ::std::string;
  }
  return string_field36_;
}
inline ::std::string* Data::release_string_field36() {
  clear_has_string_field36();
  if (string_field36_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field36_;
    string_field36_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field37 = 38;
inline bool Data::has_string_field37() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Data::set_has_string_field37() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Data::clear_has_string_field37() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Data::clear_string_field37() {
  if (string_field37_ != &::google::protobuf::internal::kEmptyString) {
    string_field37_->clear();
  }
  clear_has_string_field37();
}
inline const ::std::string& Data::string_field37() const {
  return *string_field37_;
}
inline void Data::set_string_field37(const ::std::string& value) {
  set_has_string_field37();
  if (string_field37_ == &::google::protobuf::internal::kEmptyString) {
    string_field37_ = new ::std::string;
  }
  string_field37_->assign(value);
}
inline void Data::set_string_field37(const char* value) {
  set_has_string_field37();
  if (string_field37_ == &::google::protobuf::internal::kEmptyString) {
    string_field37_ = new ::std::string;
  }
  string_field37_->assign(value);
}
inline void Data::set_string_field37(const char* value, size_t size) {
  set_has_string_field37();
  if (string_field37_ == &::google::protobuf::internal::kEmptyString) {
    string_field37_ = new ::std::string;
  }
  string_field37_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field37() {
  set_has_string_field37();
  if (string_field37_ == &::google::protobuf::internal::kEmptyString) {
    string_field37_ = new ::std::string;
  }
  return string_field37_;
}
inline ::std::string* Data::release_string_field37() {
  clear_has_string_field37();
  if (string_field37_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field37_;
    string_field37_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field38 = 39;
inline bool Data::has_string_field38() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Data::set_has_string_field38() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Data::clear_has_string_field38() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Data::clear_string_field38() {
  if (string_field38_ != &::google::protobuf::internal::kEmptyString) {
    string_field38_->clear();
  }
  clear_has_string_field38();
}
inline const ::std::string& Data::string_field38() const {
  return *string_field38_;
}
inline void Data::set_string_field38(const ::std::string& value) {
  set_has_string_field38();
  if (string_field38_ == &::google::protobuf::internal::kEmptyString) {
    string_field38_ = new ::std::string;
  }
  string_field38_->assign(value);
}
inline void Data::set_string_field38(const char* value) {
  set_has_string_field38();
  if (string_field38_ == &::google::protobuf::internal::kEmptyString) {
    string_field38_ = new ::std::string;
  }
  string_field38_->assign(value);
}
inline void Data::set_string_field38(const char* value, size_t size) {
  set_has_string_field38();
  if (string_field38_ == &::google::protobuf::internal::kEmptyString) {
    string_field38_ = new ::std::string;
  }
  string_field38_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field38() {
  set_has_string_field38();
  if (string_field38_ == &::google::protobuf::internal::kEmptyString) {
    string_field38_ = new ::std::string;
  }
  return string_field38_;
}
inline ::std::string* Data::release_string_field38() {
  clear_has_string_field38();
  if (string_field38_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field38_;
    string_field38_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field39 = 40;
inline bool Data::has_string_field39() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Data::set_has_string_field39() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Data::clear_has_string_field39() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Data::clear_string_field39() {
  if (string_field39_ != &::google::protobuf::internal::kEmptyString) {
    string_field39_->clear();
  }
  clear_has_string_field39();
}
inline const ::std::string& Data::string_field39() const {
  return *string_field39_;
}
inline void Data::set_string_field39(const ::std::string& value) {
  set_has_string_field39();
  if (string_field39_ == &::google::protobuf::internal::kEmptyString) {
    string_field39_ = new ::std::string;
  }
  string_field39_->assign(value);
}
inline void Data::set_string_field39(const char* value) {
  set_has_string_field39();
  if (string_field39_ == &::google::protobuf::internal::kEmptyString) {
    string_field39_ = new ::std::string;
  }
  string_field39_->assign(value);
}
inline void Data::set_string_field39(const char* value, size_t size) {
  set_has_string_field39();
  if (string_field39_ == &::google::protobuf::internal::kEmptyString) {
    string_field39_ = new ::std::string;
  }
  string_field39_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field39() {
  set_has_string_field39();
  if (string_field39_ == &::google::protobuf::internal::kEmptyString) {
    string_field39_ = new ::std::string;
  }
  return string_field39_;
}
inline ::std::string* Data::release_string_field39() {
  clear_has_string_field39();
  if (string_field39_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field39_;
    string_field39_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field40 = 41;
inline bool Data::has_string_field40() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Data::set_has_string_field40() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Data::clear_has_string_field40() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Data::clear_string_field40() {
  if (string_field40_ != &::google::protobuf::internal::kEmptyString) {
    string_field40_->clear();
  }
  clear_has_string_field40();
}
inline const ::std::string& Data::string_field40() const {
  return *string_field40_;
}
inline void Data::set_string_field40(const ::std::string& value) {
  set_has_string_field40();
  if (string_field40_ == &::google::protobuf::internal::kEmptyString) {
    string_field40_ = new ::std::string;
  }
  string_field40_->assign(value);
}
inline void Data::set_string_field40(const char* value) {
  set_has_string_field40();
  if (string_field40_ == &::google::protobuf::internal::kEmptyString) {
    string_field40_ = new ::std::string;
  }
  string_field40_->assign(value);
}
inline void Data::set_string_field40(const char* value, size_t size) {
  set_has_string_field40();
  if (string_field40_ == &::google::protobuf::internal::kEmptyString) {
    string_field40_ = new ::std::string;
  }
  string_field40_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field40() {
  set_has_string_field40();
  if (string_field40_ == &::google::protobuf::internal::kEmptyString) {
    string_field40_ = new ::std::string;
  }
  return string_field40_;
}
inline ::std::string* Data::release_string_field40() {
  clear_has_string_field40();
  if (string_field40_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field40_;
    string_field40_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field41 = 42;
inline bool Data::has_string_field41() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Data::set_has_string_field41() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Data::clear_has_string_field41() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Data::clear_string_field41() {
  if (string_field41_ != &::google::protobuf::internal::kEmptyString) {
    string_field41_->clear();
  }
  clear_has_string_field41();
}
inline const ::std::string& Data::string_field41() const {
  return *string_field41_;
}
inline void Data::set_string_field41(const ::std::string& value) {
  set_has_string_field41();
  if (string_field41_ == &::google::protobuf::internal::kEmptyString) {
    string_field41_ = new ::std::string;
  }
  string_field41_->assign(value);
}
inline void Data::set_string_field41(const char* value) {
  set_has_string_field41();
  if (string_field41_ == &::google::protobuf::internal::kEmptyString) {
    string_field41_ = new ::std::string;
  }
  string_field41_->assign(value);
}
inline void Data::set_string_field41(const char* value, size_t size) {
  set_has_string_field41();
  if (string_field41_ == &::google::protobuf::internal::kEmptyString) {
    string_field41_ = new ::std::string;
  }
  string_field41_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field41() {
  set_has_string_field41();
  if (string_field41_ == &::google::protobuf::internal::kEmptyString) {
    string_field41_ = new ::std::string;
  }
  return string_field41_;
}
inline ::std::string* Data::release_string_field41() {
  clear_has_string_field41();
  if (string_field41_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field41_;
    string_field41_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field42 = 43;
inline bool Data::has_string_field42() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Data::set_has_string_field42() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Data::clear_has_string_field42() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Data::clear_string_field42() {
  if (string_field42_ != &::google::protobuf::internal::kEmptyString) {
    string_field42_->clear();
  }
  clear_has_string_field42();
}
inline const ::std::string& Data::string_field42() const {
  return *string_field42_;
}
inline void Data::set_string_field42(const ::std::string& value) {
  set_has_string_field42();
  if (string_field42_ == &::google::protobuf::internal::kEmptyString) {
    string_field42_ = new ::std::string;
  }
  string_field42_->assign(value);
}
inline void Data::set_string_field42(const char* value) {
  set_has_string_field42();
  if (string_field42_ == &::google::protobuf::internal::kEmptyString) {
    string_field42_ = new ::std::string;
  }
  string_field42_->assign(value);
}
inline void Data::set_string_field42(const char* value, size_t size) {
  set_has_string_field42();
  if (string_field42_ == &::google::protobuf::internal::kEmptyString) {
    string_field42_ = new ::std::string;
  }
  string_field42_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field42() {
  set_has_string_field42();
  if (string_field42_ == &::google::protobuf::internal::kEmptyString) {
    string_field42_ = new ::std::string;
  }
  return string_field42_;
}
inline ::std::string* Data::release_string_field42() {
  clear_has_string_field42();
  if (string_field42_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field42_;
    string_field42_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field43 = 44;
inline bool Data::has_string_field43() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Data::set_has_string_field43() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Data::clear_has_string_field43() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Data::clear_string_field43() {
  if (string_field43_ != &::google::protobuf::internal::kEmptyString) {
    string_field43_->clear();
  }
  clear_has_string_field43();
}
inline const ::std::string& Data::string_field43() const {
  return *string_field43_;
}
inline void Data::set_string_field43(const ::std::string& value) {
  set_has_string_field43();
  if (string_field43_ == &::google::protobuf::internal::kEmptyString) {
    string_field43_ = new ::std::string;
  }
  string_field43_->assign(value);
}
inline void Data::set_string_field43(const char* value) {
  set_has_string_field43();
  if (string_field43_ == &::google::protobuf::internal::kEmptyString) {
    string_field43_ = new ::std::string;
  }
  string_field43_->assign(value);
}
inline void Data::set_string_field43(const char* value, size_t size) {
  set_has_string_field43();
  if (string_field43_ == &::google::protobuf::internal::kEmptyString) {
    string_field43_ = new ::std::string;
  }
  string_field43_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field43() {
  set_has_string_field43();
  if (string_field43_ == &::google::protobuf::internal::kEmptyString) {
    string_field43_ = new ::std::string;
  }
  return string_field43_;
}
inline ::std::string* Data::release_string_field43() {
  clear_has_string_field43();
  if (string_field43_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field43_;
    string_field43_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field44 = 45;
inline bool Data::has_string_field44() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Data::set_has_string_field44() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Data::clear_has_string_field44() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Data::clear_string_field44() {
  if (string_field44_ != &::google::protobuf::internal::kEmptyString) {
    string_field44_->clear();
  }
  clear_has_string_field44();
}
inline const ::std::string& Data::string_field44() const {
  return *string_field44_;
}
inline void Data::set_string_field44(const ::std::string& value) {
  set_has_string_field44();
  if (string_field44_ == &::google::protobuf::internal::kEmptyString) {
    string_field44_ = new ::std::string;
  }
  string_field44_->assign(value);
}
inline void Data::set_string_field44(const char* value) {
  set_has_string_field44();
  if (string_field44_ == &::google::protobuf::internal::kEmptyString) {
    string_field44_ = new ::std::string;
  }
  string_field44_->assign(value);
}
inline void Data::set_string_field44(const char* value, size_t size) {
  set_has_string_field44();
  if (string_field44_ == &::google::protobuf::internal::kEmptyString) {
    string_field44_ = new ::std::string;
  }
  string_field44_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field44() {
  set_has_string_field44();
  if (string_field44_ == &::google::protobuf::internal::kEmptyString) {
    string_field44_ = new ::std::string;
  }
  return string_field44_;
}
inline ::std::string* Data::release_string_field44() {
  clear_has_string_field44();
  if (string_field44_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field44_;
    string_field44_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field45 = 46;
inline bool Data::has_string_field45() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Data::set_has_string_field45() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Data::clear_has_string_field45() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Data::clear_string_field45() {
  if (string_field45_ != &::google::protobuf::internal::kEmptyString) {
    string_field45_->clear();
  }
  clear_has_string_field45();
}
inline const ::std::string& Data::string_field45() const {
  return *string_field45_;
}
inline void Data::set_string_field45(const ::std::string& value) {
  set_has_string_field45();
  if (string_field45_ == &::google::protobuf::internal::kEmptyString) {
    string_field45_ = new ::std::string;
  }
  string_field45_->assign(value);
}
inline void Data::set_string_field45(const char* value) {
  set_has_string_field45();
  if (string_field45_ == &::google::protobuf::internal::kEmptyString) {
    string_field45_ = new ::std::string;
  }
  string_field45_->assign(value);
}
inline void Data::set_string_field45(const char* value, size_t size) {
  set_has_string_field45();
  if (string_field45_ == &::google::protobuf::internal::kEmptyString) {
    string_field45_ = new ::std::string;
  }
  string_field45_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field45() {
  set_has_string_field45();
  if (string_field45_ == &::google::protobuf::internal::kEmptyString) {
    string_field45_ = new ::std::string;
  }
  return string_field45_;
}
inline ::std::string* Data::release_string_field45() {
  clear_has_string_field45();
  if (string_field45_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field45_;
    string_field45_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field46 = 47;
inline bool Data::has_string_field46() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Data::set_has_string_field46() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Data::clear_has_string_field46() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Data::clear_string_field46() {
  if (string_field46_ != &::google::protobuf::internal::kEmptyString) {
    string_field46_->clear();
  }
  clear_has_string_field46();
}
inline const ::std::string& Data::string_field46() const {
  return *string_field46_;
}
inline void Data::set_string_field46(const ::std::string& value) {
  set_has_string_field46();
  if (string_field46_ == &::google::protobuf::internal::kEmptyString) {
    string_field46_ = new ::std::string;
  }
  string_field46_->assign(value);
}
inline void Data::set_string_field46(const char* value) {
  set_has_string_field46();
  if (string_field46_ == &::google::protobuf::internal::kEmptyString) {
    string_field46_ = new ::std::string;
  }
  string_field46_->assign(value);
}
inline void Data::set_string_field46(const char* value, size_t size) {
  set_has_string_field46();
  if (string_field46_ == &::google::protobuf::internal::kEmptyString) {
    string_field46_ = new ::std::string;
  }
  string_field46_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field46() {
  set_has_string_field46();
  if (string_field46_ == &::google::protobuf::internal::kEmptyString) {
    string_field46_ = new ::std::string;
  }
  return string_field46_;
}
inline ::std::string* Data::release_string_field46() {
  clear_has_string_field46();
  if (string_field46_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field46_;
    string_field46_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field47 = 48;
inline bool Data::has_string_field47() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Data::set_has_string_field47() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Data::clear_has_string_field47() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Data::clear_string_field47() {
  if (string_field47_ != &::google::protobuf::internal::kEmptyString) {
    string_field47_->clear();
  }
  clear_has_string_field47();
}
inline const ::std::string& Data::string_field47() const {
  return *string_field47_;
}
inline void Data::set_string_field47(const ::std::string& value) {
  set_has_string_field47();
  if (string_field47_ == &::google::protobuf::internal::kEmptyString) {
    string_field47_ = new ::std::string;
  }
  string_field47_->assign(value);
}
inline void Data::set_string_field47(const char* value) {
  set_has_string_field47();
  if (string_field47_ == &::google::protobuf::internal::kEmptyString) {
    string_field47_ = new ::std::string;
  }
  string_field47_->assign(value);
}
inline void Data::set_string_field47(const char* value, size_t size) {
  set_has_string_field47();
  if (string_field47_ == &::google::protobuf::internal::kEmptyString) {
    string_field47_ = new ::std::string;
  }
  string_field47_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field47() {
  set_has_string_field47();
  if (string_field47_ == &::google::protobuf::internal::kEmptyString) {
    string_field47_ = new ::std::string;
  }
  return string_field47_;
}
inline ::std::string* Data::release_string_field47() {
  clear_has_string_field47();
  if (string_field47_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field47_;
    string_field47_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field48 = 49;
inline bool Data::has_string_field48() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Data::set_has_string_field48() {
  _has_bits_[1] |= 0x00010000u;
}
inline void Data::clear_has_string_field48() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void Data::clear_string_field48() {
  if (string_field48_ != &::google::protobuf::internal::kEmptyString) {
    string_field48_->clear();
  }
  clear_has_string_field48();
}
inline const ::std::string& Data::string_field48() const {
  return *string_field48_;
}
inline void Data::set_string_field48(const ::std::string& value) {
  set_has_string_field48();
  if (string_field48_ == &::google::protobuf::internal::kEmptyString) {
    string_field48_ = new ::std::string;
  }
  string_field48_->assign(value);
}
inline void Data::set_string_field48(const char* value) {
  set_has_string_field48();
  if (string_field48_ == &::google::protobuf::internal::kEmptyString) {
    string_field48_ = new ::std::string;
  }
  string_field48_->assign(value);
}
inline void Data::set_string_field48(const char* value, size_t size) {
  set_has_string_field48();
  if (string_field48_ == &::google::protobuf::internal::kEmptyString) {
    string_field48_ = new ::std::string;
  }
  string_field48_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field48() {
  set_has_string_field48();
  if (string_field48_ == &::google::protobuf::internal::kEmptyString) {
    string_field48_ = new ::std::string;
  }
  return string_field48_;
}
inline ::std::string* Data::release_string_field48() {
  clear_has_string_field48();
  if (string_field48_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field48_;
    string_field48_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_field49 = 50;
inline bool Data::has_string_field49() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void Data::set_has_string_field49() {
  _has_bits_[1] |= 0x00020000u;
}
inline void Data::clear_has_string_field49() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void Data::clear_string_field49() {
  if (string_field49_ != &::google::protobuf::internal::kEmptyString) {
    string_field49_->clear();
  }
  clear_has_string_field49();
}
inline const ::std::string& Data::string_field49() const {
  return *string_field49_;
}
inline void Data::set_string_field49(const ::std::string& value) {
  set_has_string_field49();
  if (string_field49_ == &::google::protobuf::internal::kEmptyString) {
    string_field49_ = new ::std::string;
  }
  string_field49_->assign(value);
}
inline void Data::set_string_field49(const char* value) {
  set_has_string_field49();
  if (string_field49_ == &::google::protobuf::internal::kEmptyString) {
    string_field49_ = new ::std::string;
  }
  string_field49_->assign(value);
}
inline void Data::set_string_field49(const char* value, size_t size) {
  set_has_string_field49();
  if (string_field49_ == &::google::protobuf::internal::kEmptyString) {
    string_field49_ = new ::std::string;
  }
  string_field49_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_string_field49() {
  set_has_string_field49();
  if (string_field49_ == &::google::protobuf::internal::kEmptyString) {
    string_field49_ = new ::std::string;
  }
  return string_field49_;
}
inline ::std::string* Data::release_string_field49() {
  clear_has_string_field49();
  if (string_field49_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_field49_;
    string_field49_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 int_field0 = 51;
inline bool Data::has_int_field0() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Data::set_has_int_field0() {
  _has_bits_[1] |= 0x00040000u;
}
inline void Data::clear_has_int_field0() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void Data::clear_int_field0() {
  int_field0_ = 0;
  clear_has_int_field0();
}
inline ::google::protobuf::int32 Data::int_field0() const {
  return int_field0_;
}
inline void Data::set_int_field0(::google::protobuf::int32 value) {
  set_has_int_field0();
  int_field0_ = value;
}

// optional int32 int_field1 = 52;
inline bool Data::has_int_field1() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void Data::set_has_int_field1() {
  _has_bits_[1] |= 0x00080000u;
}
inline void Data::clear_has_int_field1() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void Data::clear_int_field1() {
  int_field1_ = 0;
  clear_has_int_field1();
}
inline ::google::protobuf::int32 Data::int_field1() const {
  return int_field1_;
}
inline void Data::set_int_field1(::google::protobuf::int32 value) {
  set_has_int_field1();
  int_field1_ = value;
}

// optional int32 int_field2 = 53;
inline bool Data::has_int_field2() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Data::set_has_int_field2() {
  _has_bits_[1] |= 0x00100000u;
}
inline void Data::clear_has_int_field2() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void Data::clear_int_field2() {
  int_field2_ = 0;
  clear_has_int_field2();
}
inline ::google::protobuf::int32 Data::int_field2() const {
  return int_field2_;
}
inline void Data::set_int_field2(::google::protobuf::int32 value) {
  set_has_int_field2();
  int_field2_ = value;
}

// optional int32 int_field3 = 54;
inline bool Data::has_int_field3() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Data::set_has_int_field3() {
  _has_bits_[1] |= 0x00200000u;
}
inline void Data::clear_has_int_field3() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void Data::clear_int_field3() {
  int_field3_ = 0;
  clear_has_int_field3();
}
inline ::google::protobuf::int32 Data::int_field3() const {
  return int_field3_;
}
inline void Data::set_int_field3(::google::protobuf::int32 value) {
  set_has_int_field3();
  int_field3_ = value;
}

// optional int32 int_field4 = 55;
inline bool Data::has_int_field4() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void Data::set_has_int_field4() {
  _has_bits_[1] |= 0x00400000u;
}
inline void Data::clear_has_int_field4() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void Data::clear_int_field4() {
  int_field4_ = 0;
  clear_has_int_field4();
}
inline ::google::protobuf::int32 Data::int_field4() const {
  return int_field4_;
}
inline void Data::set_int_field4(::google::protobuf::int32 value) {
  set_has_int_field4();
  int_field4_ = value;
}

// optional int32 int_field5 = 56;
inline bool Data::has_int_field5() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void Data::set_has_int_field5() {
  _has_bits_[1] |= 0x00800000u;
}
inline void Data::clear_has_int_field5() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void Data::clear_int_field5() {
  int_field5_ = 0;
  clear_has_int_field5();
}
inline ::google::protobuf::int32 Data::int_field5() const {
  return int_field5_;
}
inline void Data::set_int_field5(::google::protobuf::int32 value) {
  set_has_int_field5();
  int_field5_ = value;
}

// optional int32 int_field6 = 57;
inline bool Data::has_int_field6() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void Data::set_has_int_field6() {
  _has_bits_[1] |= 0x01000000u;
}
inline void Data::clear_has_int_field6() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void Data::clear_int_field6() {
  int_field6_ = 0;
  clear_has_int_field6();
}
inline ::google::protobuf::int32 Data::int_field6() const {
  return int_field6_;
}
inline void Data::set_int_field6(::google::protobuf::int32 value) {
  set_has_int_field6();
  int_field6_ = value;
}

// optional int32 int_field7 = 58;
inline bool Data::has_int_field7() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void Data::set_has_int_field7() {
  _has_bits_[1] |= 0x02000000u;
}
inline void Data::clear_has_int_field7() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void Data::clear_int_field7() {
  int_field7_ = 0;
  clear_has_int_field7();
}
inline ::google::protobuf::int32 Data::int_field7() const {
  return int_field7_;
}
inline void Data::set_int_field7(::google::protobuf::int32 value) {
  set_has_int_field7();
  int_field7_ = value;
}

// optional int32 int_field8 = 59;
inline bool Data::has_int_field8() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void Data::set_has_int_field8() {
  _has_bits_[1] |= 0x04000000u;
}
inline void Data::clear_has_int_field8() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void Data::clear_int_field8() {
  int_field8_ = 0;
  clear_has_int_field8();
}
inline ::google::protobuf::int32 Data::int_field8() const {
  return int_field8_;
}
inline void Data::set_int_field8(::google::protobuf::int32 value) {
  set_has_int_field8();
  int_field8_ = value;
}

// optional int32 int_field9 = 60;
inline bool Data::has_int_field9() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void Data::set_has_int_field9() {
  _has_bits_[1] |= 0x08000000u;
}
inline void Data::clear_has_int_field9() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void Data::clear_int_field9() {
  int_field9_ = 0;
  clear_has_int_field9();
}
inline ::google::protobuf::int32 Data::int_field9() const {
  return int_field9_;
}
inline void Data::set_int_field9(::google::protobuf::int32 value) {
  set_has_int_field9();
  int_field9_ = value;
}

// optional int32 int_field10 = 61;
inline bool Data::has_int_field10() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void Data::set_has_int_field10() {
  _has_bits_[1] |= 0x10000000u;
}
inline void Data::clear_has_int_field10() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void Data::clear_int_field10() {
  int_field10_ = 0;
  clear_has_int_field10();
}
inline ::google::protobuf::int32 Data::int_field10() const {
  return int_field10_;
}
inline void Data::set_int_field10(::google::protobuf::int32 value) {
  set_has_int_field10();
  int_field10_ = value;
}

// optional int32 int_field11 = 62;
inline bool Data::has_int_field11() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void Data::set_has_int_field11() {
  _has_bits_[1] |= 0x20000000u;
}
inline void Data::clear_has_int_field11() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void Data::clear_int_field11() {
  int_field11_ = 0;
  clear_has_int_field11();
}
inline ::google::protobuf::int32 Data::int_field11() const {
  return int_field11_;
}
inline void Data::set_int_field11(::google::protobuf::int32 value) {
  set_has_int_field11();
  int_field11_ = value;
}

// optional int32 int_field12 = 63;
inline bool Data::has_int_field12() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void Data::set_has_int_field12() {
  _has_bits_[1] |= 0x40000000u;
}
inline void Data::clear_has_int_field12() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void Data::clear_int_field12() {
  int_field12_ = 0;
  clear_has_int_field12();
}
inline ::google::protobuf::int32 Data::int_field12() const {
  return int_field12_;
}
inline void Data::set_int_field12(::google::protobuf::int32 value) {
  set_has_int_field12();
  int_field12_ = value;
}

// optional int32 int_field13 = 64;
inline bool Data::has_int_field13() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void Data::set_has_int_field13() {
  _has_bits_[1] |= 0x80000000u;
}
inline void Data::clear_has_int_field13() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void Data::clear_int_field13() {
  int_field13_ = 0;
  clear_has_int_field13();
}
inline ::google::protobuf::int32 Data::int_field13() const {
  return int_field13_;
}
inline void Data::set_int_field13(::google::protobuf::int32 value) {
  set_has_int_field13();
  int_field13_ = value;
}

// optional int32 int_field14 = 65;
inline bool Data::has_int_field14() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void Data::set_has_int_field14() {
  _has_bits_[2] |= 0x00000001u;
}
inline void Data::clear_has_int_field14() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void Data::clear_int_field14() {
  int_field14_ = 0;
  clear_has_int_field14();
}
inline ::google::protobuf::int32 Data::int_field14() const {
  return int_field14_;
}
inline void Data::set_int_field14(::google::protobuf::int32 value) {
  set_has_int_field14();
  int_field14_ = value;
}

// optional int32 int_field15 = 66;
inline bool Data::has_int_field15() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void Data::set_has_int_field15() {
  _has_bits_[2] |= 0x00000002u;
}
inline void Data::clear_has_int_field15() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void Data::clear_int_field15() {
  int_field15_ = 0;
  clear_has_int_field15();
}
inline ::google::protobuf::int32 Data::int_field15() const {
  return int_field15_;
}
inline void Data::set_int_field15(::google::protobuf::int32 value) {
  set_has_int_field15();
  int_field15_ = value;
}

// optional int32 int_field16 = 67;
inline bool Data::has_int_field16() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void Data::set_has_int_field16() {
  _has_bits_[2] |= 0x00000004u;
}
inline void Data::clear_has_int_field16() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void Data::clear_int_field16() {
  int_field16_ = 0;
  clear_has_int_field16();
}
inline ::google::protobuf::int32 Data::int_field16() const {
  return int_field16_;
}
inline void Data::set_int_field16(::google::protobuf::int32 value) {
  set_has_int_field16();
  int_field16_ = value;
}

// optional int32 int_field17 = 68;
inline bool Data::has_int_field17() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void Data::set_has_int_field17() {
  _has_bits_[2] |= 0x00000008u;
}
inline void Data::clear_has_int_field17() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void Data::clear_int_field17() {
  int_field17_ = 0;
  clear_has_int_field17();
}
inline ::google::protobuf::int32 Data::int_field17() const {
  return int_field17_;
}
inline void Data::set_int_field17(::google::protobuf::int32 value) {
  set_has_int_field17();
  int_field17_ = value;
}

// optional int32 int_field18 = 69;
inline bool Data::has_int_field18() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void Data::set_has_int_field18() {
  _has_bits_[2] |= 0x00000010u;
}
inline void Data::clear_has_int_field18() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void Data::clear_int_field18() {
  int_field18_ = 0;
  clear_has_int_field18();
}
inline ::google::protobuf::int32 Data::int_field18() const {
  return int_field18_;
}
inline void Data::set_int_field18(::google::protobuf::int32 value) {
  set_has_int_field18();
  int_field18_ = value;
}

// optional int32 int_field19 = 70;
inline bool Data::has_int_field19() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void Data::set_has_int_field19() {
  _has_bits_[2] |= 0x00000020u;
}
inline void Data::clear_has_int_field19() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void Data::clear_int_field19() {
  int_field19_ = 0;
  clear_has_int_field19();
}
inline ::google::protobuf::int32 Data::int_field19() const {
  return int_field19_;
}
inline void Data::set_int_field19(::google::protobuf::int32 value) {
  set_has_int_field19();
  int_field19_ = value;
}

// optional int32 int_field20 = 71;
inline bool Data::has_int_field20() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void Data::set_has_int_field20() {
  _has_bits_[2] |= 0x00000040u;
}
inline void Data::clear_has_int_field20() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void Data::clear_int_field20() {
  int_field20_ = 0;
  clear_has_int_field20();
}
inline ::google::protobuf::int32 Data::int_field20() const {
  return int_field20_;
}
inline void Data::set_int_field20(::google::protobuf::int32 value) {
  set_has_int_field20();
  int_field20_ = value;
}

// optional int32 int_field21 = 72;
inline bool Data::has_int_field21() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void Data::set_has_int_field21() {
  _has_bits_[2] |= 0x00000080u;
}
inline void Data::clear_has_int_field21() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void Data::clear_int_field21() {
  int_field21_ = 0;
  clear_has_int_field21();
}
inline ::google::protobuf::int32 Data::int_field21() const {
  return int_field21_;
}
inline void Data::set_int_field21(::google::protobuf::int32 value) {
  set_has_int_field21();
  int_field21_ = value;
}

// optional int32 int_field22 = 73;
inline bool Data::has_int_field22() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void Data::set_has_int_field22() {
  _has_bits_[2] |= 0x00000100u;
}
inline void Data::clear_has_int_field22() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void Data::clear_int_field22() {
  int_field22_ = 0;
  clear_has_int_field22();
}
inline ::google::protobuf::int32 Data::int_field22() const {
  return int_field22_;
}
inline void Data::set_int_field22(::google::protobuf::int32 value) {
  set_has_int_field22();
  int_field22_ = value;
}

// optional int32 int_field23 = 74;
inline bool Data::has_int_field23() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void Data::set_has_int_field23() {
  _has_bits_[2] |= 0x00000200u;
}
inline void Data::clear_has_int_field23() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void Data::clear_int_field23() {
  int_field23_ = 0;
  clear_has_int_field23();
}
inline ::google::protobuf::int32 Data::int_field23() const {
  return int_field23_;
}
inline void Data::set_int_field23(::google::protobuf::int32 value) {
  set_has_int_field23();
  int_field23_ = value;
}

// optional int32 int_field24 = 75;
inline bool Data::has_int_field24() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void Data::set_has_int_field24() {
  _has_bits_[2] |= 0x00000400u;
}
inline void Data::clear_has_int_field24() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void Data::clear_int_field24() {
  int_field24_ = 0;
  clear_has_int_field24();
}
inline ::google::protobuf::int32 Data::int_field24() const {
  return int_field24_;
}
inline void Data::set_int_field24(::google::protobuf::int32 value) {
  set_has_int_field24();
  int_field24_ = value;
}

// optional int32 int_field25 = 76;
inline bool Data::has_int_field25() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void Data::set_has_int_field25() {
  _has_bits_[2] |= 0x00000800u;
}
inline void Data::clear_has_int_field25() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void Data::clear_int_field25() {
  int_field25_ = 0;
  clear_has_int_field25();
}
inline ::google::protobuf::int32 Data::int_field25() const {
  return int_field25_;
}
inline void Data::set_int_field25(::google::protobuf::int32 value) {
  set_has_int_field25();
  int_field25_ = value;
}

// optional int32 int_field26 = 77;
inline bool Data::has_int_field26() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void Data::set_has_int_field26() {
  _has_bits_[2] |= 0x00001000u;
}
inline void Data::clear_has_int_field26() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void Data::clear_int_field26() {
  int_field26_ = 0;
  clear_has_int_field26();
}
inline ::google::protobuf::int32 Data::int_field26() const {
  return int_field26_;
}
inline void Data::set_int_field26(::google::protobuf::int32 value) {
  set_has_int_field26();
  int_field26_ = value;
}

// optional int32 int_field27 = 78;
inline bool Data::has_int_field27() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void Data::set_has_int_field27() {
  _has_bits_[2] |= 0x00002000u;
}
inline void Data::clear_has_int_field27() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void Data::clear_int_field27() {
  int_field27_ = 0;
  clear_has_int_field27();
}
inline ::google::protobuf::int32 Data::int_field27() const {
  return int_field27_;
}
inline void Data::set_int_field27(::google::protobuf::int32 value) {
  set_has_int_field27();
  int_field27_ = value;
}

// optional int32 int_field28 = 79;
inline bool Data::has_int_field28() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void Data::set_has_int_field28() {
  _has_bits_[2] |= 0x00004000u;
}
inline void Data::clear_has_int_field28() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void Data::clear_int_field28() {
  int_field28_ = 0;
  clear_has_int_field28();
}
inline ::google::protobuf::int32 Data::int_field28() const {
  return int_field28_;
}
inline void Data::set_int_field28(::google::protobuf::int32 value) {
  set_has_int_field28();
  int_field28_ = value;
}

// optional int32 int_field29 = 80;
inline bool Data::has_int_field29() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void Data::set_has_int_field29() {
  _has_bits_[2] |= 0x00008000u;
}
inline void Data::clear_has_int_field29() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void Data::clear_int_field29() {
  int_field29_ = 0;
  clear_has_int_field29();
}
inline ::google::protobuf::int32 Data::int_field29() const {
  return int_field29_;
}
inline void Data::set_int_field29(::google::protobuf::int32 value) {
  set_has_int_field29();
  int_field29_ = value;
}

// optional int32 int_field30 = 81;
inline bool Data::has_int_field30() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void Data::set_has_int_field30() {
  _has_bits_[2] |= 0x00010000u;
}
inline void Data::clear_has_int_field30() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void Data::clear_int_field30() {
  int_field30_ = 0;
  clear_has_int_field30();
}
inline ::google::protobuf::int32 Data::int_field30() const {
  return int_field30_;
}
inline void Data::set_int_field30(::google::protobuf::int32 value) {
  set_has_int_field30();
  int_field30_ = value;
}

// optional int32 int_field31 = 82;
inline bool Data::has_int_field31() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void Data::set_has_int_field31() {
  _has_bits_[2] |= 0x00020000u;
}
inline void Data::clear_has_int_field31() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void Data::clear_int_field31() {
  int_field31_ = 0;
  clear_has_int_field31();
}
inline ::google::protobuf::int32 Data::int_field31() const {
  return int_field31_;
}
inline void Data::set_int_field31(::google::protobuf::int32 value) {
  set_has_int_field31();
  int_field31_ = value;
}

// optional int32 int_field32 = 83;
inline bool Data::has_int_field32() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void Data::set_has_int_field32() {
  _has_bits_[2] |= 0x00040000u;
}
inline void Data::clear_has_int_field32() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void Data::clear_int_field32() {
  int_field32_ = 0;
  clear_has_int_field32();
}
inline ::google::protobuf::int32 Data::int_field32() const {
  return int_field32_;
}
inline void Data::set_int_field32(::google::protobuf::int32 value) {
  set_has_int_field32();
  int_field32_ = value;
}

// optional int32 int_field33 = 84;
inline bool Data::has_int_field33() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void Data::set_has_int_field33() {
  _has_bits_[2] |= 0x00080000u;
}
inline void Data::clear_has_int_field33() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void Data::clear_int_field33() {
  int_field33_ = 0;
  clear_has_int_field33();
}
inline ::google::protobuf::int32 Data::int_field33() const {
  return int_field33_;
}
inline void Data::set_int_field33(::google::protobuf::int32 value) {
  set_has_int_field33();
  int_field33_ = value;
}

// optional int32 int_field34 = 85;
inline bool Data::has_int_field34() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void Data::set_has_int_field34() {
  _has_bits_[2] |= 0x00100000u;
}
inline void Data::clear_has_int_field34() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void Data::clear_int_field34() {
  int_field34_ = 0;
  clear_has_int_field34();
}
inline ::google::protobuf::int32 Data::int_field34() const {
  return int_field34_;
}
inline void Data::set_int_field34(::google::protobuf::int32 value) {
  set_has_int_field34();
  int_field34_ = value;
}

// optional int32 int_field35 = 86;
inline bool Data::has_int_field35() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void Data::set_has_int_field35() {
  _has_bits_[2] |= 0x00200000u;
}
inline void Data::clear_has_int_field35() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void Data::clear_int_field35() {
  int_field35_ = 0;
  clear_has_int_field35();
}
inline ::google::protobuf::int32 Data::int_field35() const {
  return int_field35_;
}
inline void Data::set_int_field35(::google::protobuf::int32 value) {
  set_has_int_field35();
  int_field35_ = value;
}

// optional int32 int_field36 = 87;
inline bool Data::has_int_field36() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void Data::set_has_int_field36() {
  _has_bits_[2] |= 0x00400000u;
}
inline void Data::clear_has_int_field36() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void Data::clear_int_field36() {
  int_field36_ = 0;
  clear_has_int_field36();
}
inline ::google::protobuf::int32 Data::int_field36() const {
  return int_field36_;
}
inline void Data::set_int_field36(::google::protobuf::int32 value) {
  set_has_int_field36();
  int_field36_ = value;
}

// optional int32 int_field37 = 88;
inline bool Data::has_int_field37() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void Data::set_has_int_field37() {
  _has_bits_[2] |= 0x00800000u;
}
inline void Data::clear_has_int_field37() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void Data::clear_int_field37() {
  int_field37_ = 0;
  clear_has_int_field37();
}
inline ::google::protobuf::int32 Data::int_field37() const {
  return int_field37_;
}
inline void Data::set_int_field37(::google::protobuf::int32 value) {
  set_has_int_field37();
  int_field37_ = value;
}

// optional int32 int_field38 = 89;
inline bool Data::has_int_field38() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void Data::set_has_int_field38() {
  _has_bits_[2] |= 0x01000000u;
}
inline void Data::clear_has_int_field38() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void Data::clear_int_field38() {
  int_field38_ = 0;
  clear_has_int_field38();
}
inline ::google::protobuf::int32 Data::int_field38() const {
  return int_field38_;
}
inline void Data::set_int_field38(::google::protobuf::int32 value) {
  set_has_int_field38();
  int_field38_ = value;
}

// optional int32 int_field39 = 90;
inline bool Data::has_int_field39() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void Data::set_has_int_field39() {
  _has_bits_[2] |= 0x02000000u;
}
inline void Data::clear_has_int_field39() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void Data::clear_int_field39() {
  int_field39_ = 0;
  clear_has_int_field39();
}
inline ::google::protobuf::int32 Data::int_field39() const {
  return int_field39_;
}
inline void Data::set_int_field39(::google::protobuf::int32 value) {
  set_has_int_field39();
  int_field39_ = value;
}

// optional int32 int_field40 = 91;
inline bool Data::has_int_field40() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void Data::set_has_int_field40() {
  _has_bits_[2] |= 0x04000000u;
}
inline void Data::clear_has_int_field40() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void Data::clear_int_field40() {
  int_field40_ = 0;
  clear_has_int_field40();
}
inline ::google::protobuf::int32 Data::int_field40() const {
  return int_field40_;
}
inline void Data::set_int_field40(::google::protobuf::int32 value) {
  set_has_int_field40();
  int_field40_ = value;
}

// optional int32 int_field41 = 92;
inline bool Data::has_int_field41() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void Data::set_has_int_field41() {
  _has_bits_[2] |= 0x08000000u;
}
inline void Data::clear_has_int_field41() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void Data::clear_int_field41() {
  int_field41_ = 0;
  clear_has_int_field41();
}
inline ::google::protobuf::int32 Data::int_field41() const {
  return int_field41_;
}
inline void Data::set_int_field41(::google::protobuf::int32 value) {
  set_has_int_field41();
  int_field41_ = value;
}

// optional int32 int_field42 = 93;
inline bool Data::has_int_field42() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void Data::set_has_int_field42() {
  _has_bits_[2] |= 0x10000000u;
}
inline void Data::clear_has_int_field42() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void Data::clear_int_field42() {
  int_field42_ = 0;
  clear_has_int_field42();
}
inline ::google::protobuf::int32 Data::int_field42() const {
  return int_field42_;
}
inline void Data::set_int_field42(::google::protobuf::int32 value) {
  set_has_int_field42();
  int_field42_ = value;
}

// optional int32 int_field43 = 94;
inline bool Data::has_int_field43() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void Data::set_has_int_field43() {
  _has_bits_[2] |= 0x20000000u;
}
inline void Data::clear_has_int_field43() {
  _has_bits_[2] &= ~0x20000000u;
}
inline void Data::clear_int_field43() {
  int_field43_ = 0;
  clear_has_int_field43();
}
inline ::google::protobuf::int32 Data::int_field43() const {
  return int_field43_;
}
inline void Data::set_int_field43(::google::protobuf::int32 value) {
  set_has_int_field43();
  int_field43_ = value;
}

// optional int32 int_field44 = 95;
inline bool Data::has_int_field44() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
inline void Data::set_has_int_field44() {
  _has_bits_[2] |= 0x40000000u;
}
inline void Data::clear_has_int_field44() {
  _has_bits_[2] &= ~0x40000000u;
}
inline void Data::clear_int_field44() {
  int_field44_ = 0;
  clear_has_int_field44();
}
inline ::google::protobuf::int32 Data::int_field44() const {
  return int_field44_;
}
inline void Data::set_int_field44(::google::protobuf::int32 value) {
  set_has_int_field44();
  int_field44_ = value;
}

// optional int32 int_field45 = 96;
inline bool Data::has_int_field45() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
inline void Data::set_has_int_field45() {
  _has_bits_[2] |= 0x80000000u;
}
inline void Data::clear_has_int_field45() {
  _has_bits_[2] &= ~0x80000000u;
}
inline void Data::clear_int_field45() {
  int_field45_ = 0;
  clear_has_int_field45();
}
inline ::google::protobuf::int32 Data::int_field45() const {
  return int_field45_;
}
inline void Data::set_int_field45(::google::protobuf::int32 value) {
  set_has_int_field45();
  int_field45_ = value;
}

// optional int32 int_field46 = 97;
inline bool Data::has_int_field46() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
inline void Data::set_has_int_field46() {
  _has_bits_[3] |= 0x00000001u;
}
inline void Data::clear_has_int_field46() {
  _has_bits_[3] &= ~0x00000001u;
}
inline void Data::clear_int_field46() {
  int_field46_ = 0;
  clear_has_int_field46();
}
inline ::google::protobuf::int32 Data::int_field46() const {
  return int_field46_;
}
inline void Data::set_int_field46(::google::protobuf::int32 value) {
  set_has_int_field46();
  int_field46_ = value;
}

// optional int32 int_field47 = 98;
inline bool Data::has_int_field47() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
inline void Data::set_has_int_field47() {
  _has_bits_[3] |= 0x00000002u;
}
inline void Data::clear_has_int_field47() {
  _has_bits_[3] &= ~0x00000002u;
}
inline void Data::clear_int_field47() {
  int_field47_ = 0;
  clear_has_int_field47();
}
inline ::google::protobuf::int32 Data::int_field47() const {
  return int_field47_;
}
inline void Data::set_int_field47(::google::protobuf::int32 value) {
  set_has_int_field47();
  int_field47_ = value;
}

// optional int32 int_field48 = 99;
inline bool Data::has_int_field48() const {
  return (_has_bits_[3] & 0x00000004u) != 0;
}
inline void Data::set_has_int_field48() {
  _has_bits_[3] |= 0x00000004u;
}
inline void Data::clear_has_int_field48() {
  _has_bits_[3] &= ~0x00000004u;
}
inline void Data::clear_int_field48() {
  int_field48_ = 0;
  clear_has_int_field48();
}
inline ::google::protobuf::int32 Data::int_field48() const {
  return int_field48_;
}
inline void Data::set_int_field48(::google::protobuf::int32 value) {
  set_has_int_field48();
  int_field48_ = value;
}

// optional int32 int_field49 = 100;
inline bool Data::has_int_field49() const {
  return (_has_bits_[3] & 0x00000008u) != 0;
}
inline void Data::set_has_int_field49() {
  _has_bits_[3] |= 0x00000008u;
}
inline void Data::clear_has_int_field49() {
  _has_bits_[3] &= ~0x00000008u;
}
inline void Data::clear_int_field49() {
  int_field49_ = 0;
  clear_has_int_field49();
}
inline ::google::protobuf::int32 Data::int_field49() const {
  return int_field49_;
}
inline void Data::set_int_field49(::google::protobuf::int32 value) {
  set_has_int_field49();
  int_field49_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace large

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_large_2eproto__INCLUDED
